<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shaw He&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-11-17T08:28:23.431Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Shaw He</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode 871 最低加油次数</title>
    <link href="http://yoursite.com/2018/11/17/LeetCode%20871%20%E6%9C%80%E4%BD%8E%E5%8A%A0%E6%B2%B9%E6%AC%A1%E6%95%B0%20/"/>
    <id>http://yoursite.com/2018/11/17/LeetCode 871 最低加油次数 /</id>
    <published>2018-11-17T08:26:45.684Z</published>
    <updated>2018-11-17T08:28:23.431Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>汽车从起点出发驶向目的地，该目的地位于出发位置东面 <code>target</code> 英里处。</p><p>沿途有加油站，每个 <code>station[i]</code> 代表一个加油站，它位于出发位置东面 <code>station[i][0]</code> 英里处，并且有 <code>station[i][1]</code> 升汽油。</p><p>假设汽车油箱的容量是无限的，其中最初有 <code>startFuel</code> 升燃料。它每行驶 1 英里就会用掉 1 升汽油。</p><p>当汽车到达加油站时，它可能停下来加油，将所有汽油从加油站转移到汽车中。</p><p>为了到达目的地，汽车所必要的最低加油次数是多少？如果无法到达目的地，则返回 <code>-1</code> 。</p><p>注意：如果汽车到达加油站时剩余燃料为 0，它仍然可以在那里加油。如果汽车到达目的地时剩余燃料为 0，仍然认为它已经到达目的地。</p><p><strong>示例1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入：target = 1, startFuel = 1, stations = []</div><div class="line">输出：0</div><div class="line">解释：我们可以在不加油的情况下到达目的地。</div></pre></td></tr></table></figure><p><strong>示例2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">输入：target = 100, startFuel = 1, stations = [[10,100]]</div><div class="line">输出：-1</div><div class="line">解释：我们无法抵达目的地，甚至无法到达第一个加油站。</div></pre></td></tr></table></figure><p><strong>示例3</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">输入：target = 100, startFuel = 10, stations = [[10,60],[20,30],[30,30],[60,40]]</div><div class="line">输出：2</div><div class="line">解释：</div><div class="line">我们出发时有 10 升燃料。</div><div class="line">我们开车来到距起点 10 英里处的加油站，消耗 10 升燃料。将汽油从 0 升加到 60 升。</div><div class="line">然后，我们从 10 英里处的加油站开到 60 英里处的加油站（消耗 50 升燃料），</div><div class="line">并将汽油从 10 升加到 50 升。然后我们开车抵达目的地。</div><div class="line">我们沿途在1两个加油站停靠，所以返回 2 。</div></pre></td></tr></table></figure><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>根据题目要求找到最低加油次数，首先考虑贪心算法。贪心算法的主要思想是：将问题的解决分解为若干个阶段，在当前阶段做出的最优选择，会导致整体最优的结果。</p><p>在这道题目中，我们的目标是使得汽车到达终点，其中汽车会经过若干次加油，则可以将每两次加油的中间过程看做一个阶段，加油就是一次选择——选择合适的加油站，使得总的加油次数最少。</p><p>接下来，要弄清楚的问题是“当前阶段”有哪些选择，以及最优选择是什么。假如汽车开始的汽油是<code>X</code>升，那么可以行驶<code>X</code>英里，如果从出发点到<code>X</code>公里范围里面一共有<code>Y</code>个加油站，因为要求最低加油次数，所以先假定每次只能加一次油，因此就有<code>Y</code>种选择，最优的选择就是其中具有最大油量的加油站，假定其有<code>max</code>升油，那下一个阶段就变成出发点到<code>X+max</code>英里的位置。（注意已经加油的车站不能再次加油）</p><p>如果当前阶段里面无可用的加油站，就说明无法到达目的地；如果任意阶段的选择之后，<code>y+max</code>大于到目的地的距离，就可以到达目的地。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>建立一个数组表示加油站是否已经使用过，初始值为<code>0</code>；<code>y</code>表示当前汽车能够到达的最远点，<code>count</code>记录加油次数，<code>temp</code>记录当前阶段选择的加油站下标。</p><p>当<code>y</code>小于<code>target</code>的时候循环选择加油站，对位置处于<code>0~y</code>的加油站进行遍历，找出具有最大油量的加油站，更新<code>y</code>和<code>count</code>的值，并将该加油站的状态置为<code>1</code>。一直循环，直到<code>y</code>大于<code>target</code>或者无可用加油站，即找出的最大油量为<code>0</code>。</p><p>完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minRefuelStops</span><span class="params">(<span class="keyword">int</span> target, <span class="keyword">int</span> startFuel, <span class="keyword">int</span>[][] stations)</span> </span>&#123;</div><div class="line">       <span class="keyword">int</span>[] state = <span class="keyword">new</span> <span class="keyword">int</span>[stations.length]; <span class="comment">// 建立一个数组，0代表未使用，1代表已使用</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; state.length; i++) &#123;</div><div class="line">            state[i] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> y = startFuel; <span class="comment">// 代表汽车当前能到达的最远点</span></div><div class="line">        <span class="keyword">int</span> count = <span class="number">0</span>; <span class="comment">// 代表汽车加油的次数</span></div><div class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>; <span class="comment">//记录当前阶段加油站的下标</span></div><div class="line">        <span class="keyword">while</span> (y &lt; target) &#123;</div><div class="line">            <span class="keyword">int</span> max = <span class="number">0</span>; <span class="comment">// 范围内可获得的最大加油量</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; stations.length; i++) &#123;</div><div class="line">                <span class="keyword">if</span> (stations[i][<span class="number">0</span>] &lt;= y &amp;&amp; state[i] != <span class="number">1</span> &amp;&amp; stations[i][<span class="number">1</span>] &gt; max) &#123;</div><div class="line">                    max = stations[i][<span class="number">1</span>];</div><div class="line">                    temp = i;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(max == <span class="number">0</span>) &#123;<span class="comment">//无可用加油站</span></div><div class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            state[temp] = <span class="number">1</span>;</div><div class="line">            y = y + max; <span class="comment">// 重置到达的最远点</span></div><div class="line">            count++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> count;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;汽车从起点出发驶向目的地，该目的地位于出发位置东面 &lt;code&gt;target&lt;/code&gt; 英里处。&lt;/p&gt;
&lt;p&gt;沿途有加
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="贪心算法" scheme="http://yoursite.com/tags/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>小程序踩坑记录（二)</title>
    <link href="http://yoursite.com/2018/11/12/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://yoursite.com/2018/11/12/小程序踩坑记录（二）/</id>
    <published>2018-11-12T09:43:19.014Z</published>
    <updated>2018-11-12T09:43:19.015Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>上一篇文章写的是开发微信小程序的基础性内容，从这一篇开始主要记录我在实际开发过程中一些比较重要的内容，或者某一个问题的具体实现方法。主要根据各个网站、博客、帖子、教程的相关资料，结合自己的开发经验整理而成，内容结构和关联性不强，按点排列，供以后查找使用。本篇为第一部分。</p></blockquote><h1 id="页面跳转"><a href="#页面跳转" class="headerlink" title="页面跳转"></a>页面跳转</h1><h2 id="页面栈"><a href="#页面栈" class="headerlink" title="页面栈"></a>页面栈</h2><p>在小程序中，框架以栈的形式维护当前所有的页面，当页面发生变化的时候，页面栈的表现如下。</p><table><thead><tr><th style="text-align:center">页面操作</th><th style="text-align:center">页面栈表现形式</th></tr></thead><tbody><tr><td style="text-align:center">页面初始化</td><td style="text-align:center">新页面入栈</td></tr><tr><td style="text-align:center">打开新页面</td><td style="text-align:center">新页面入栈</td></tr><tr><td style="text-align:center">页面重定向</td><td style="text-align:center">当前页面出栈，新页面入栈</td></tr><tr><td style="text-align:center">页面返回</td><td style="text-align:center">页面不断出栈，直到目标返回页</td></tr><tr><td style="text-align:center">Tab切换</td><td style="text-align:center">页面全部出栈，只留下新的Tab页面</td></tr><tr><td style="text-align:center">重加载</td><td style="text-align:center">页面全部出栈，只留下新的页面</td></tr></tbody></table><h2 id="获取页面栈"><a href="#获取页面栈" class="headerlink" title="获取页面栈"></a>获取页面栈</h2><p><code>getCurrentPages( )</code>函数用于获取当前页面栈的实例，以数组形式按栈的顺序给出，第一个元素为首页，最后一个元素为当前页面。</p><p>注意：</p><ol><li><p>不能修改页面栈，可能导致程序异常</p></li><li><p>不能在<code>App.onLaunch</code>的时候调用，此时page还没有生成</p></li></ol><h2 id="常用页面跳转方法"><a href="#常用页面跳转方法" class="headerlink" title="常用页面跳转方法"></a>常用页面跳转方法</h2><p>通常有两种方式，在JS文件中调用API接口，或者在WXML文件中使用组件<code>&lt;navigator&gt;</code>，也建议使用这种方式进行页面跳转。</p><ol><li><strong>打开新页面</strong>。<code>wx.navigateTo</code>方法，前一个页面OnHide，新页面onLoad，onShow。</li><li><strong>页面重定向</strong>。<code>wx.redirectTo</code>方法，前一个页面onUnLoad，新页面onLoad，onShow。</li><li><strong>页面返回</strong>。<code>wx.navigateBack</code>方法或者按左上角返回按钮，前一个页面onUnload，新页面onShow。</li><li><strong>重启动</strong>。<code>wx.reLaunch</code>方法，前一个页面onUnload，新页面onLoad,onShow。</li><li><strong>Tab切换</strong>。<code>wx.switchTab</code>方法或按下方的Tab切换，其生命周期如表所示：</li></ol><blockquote><p>以 A、B 页面为 Tabbar 页面，C 是从 A 页面打开的页面，D 页面是从 C 页面打开的页面为例。</p></blockquote><table><thead><tr><th>当前页面</th><th>路由后页面</th><th>触发的生命周期（按顺序）</th></tr></thead><tbody><tr><td>A</td><td>A</td><td>Nothing happend</td></tr><tr><td>A</td><td>B</td><td>A.<code>onHide()</code>, B.<code>onLoad()</code>, B.<code>onShow()</code></td></tr><tr><td>A</td><td>B（再次打开）</td><td>A.<code>onHide()</code>, B.<code>onShow()</code></td></tr><tr><td>C</td><td>A</td><td>C.<code>onUnload()</code>, A.<code>onShow()</code></td></tr><tr><td>C</td><td>B</td><td>C.<code>onUnload()</code>, B.<code>onLoad()</code>, B.<code>onShow()</code></td></tr><tr><td>D</td><td>B</td><td>D.<code>onUnload()</code>, C.<code>onUnload()</code>, B.<code>onLoad()</code>, B.<code>onShow()</code></td></tr><tr><td>D（从转发进入）</td><td>A</td><td>D.<code>onUnload()</code>, A.<code>onLoad()</code>, A.<code>onShow()</code></td></tr><tr><td>D（从转发进入）</td><td>B</td><td>D.<code>onUnload()</code>, B.<code>onLoad()</code>, B.<code>onShow()</code></td></tr></tbody></table><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>打开一个新页面可用<code>wx.navigateTo</code>和<code>wx.redirectTo</code>方法，区别在于前一个正常入栈，后一个会将页面栈清空；使用前一种方法，在新页面导航栏左边会自动生成一个返回按钮，而后一种方法则不会。</p><h1 id="页面渲染"><a href="#页面渲染" class="headerlink" title="页面渲染"></a>页面渲染</h1><h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><p>在标签内使用<code>wx:if</code>进行判断，判断值为<code>true</code>则显示，判断值为<code>false</code>则不显示。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--wxml--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123;view1&#125;&#125;"</span>&gt;</span> WEBVIEW <span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:elif</span>=<span class="string">"&#123;&#123;view2 == 'APP'&#125;&#125;"</span>&gt;</span> APP <span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:else</span>=<span class="string">"&#123;&#123;3 &gt; 1&#125;&#125;"</span>&gt;</span> MINA <span class="tag">&lt;/<span class="name">view</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Page(&#123;</div><div class="line">  <span class="attr">data</span>: &#123;</div><div class="line">    <span class="attr">view1</span>: <span class="literal">true</span></div><div class="line">    view2: <span class="string">'MINA'</span></div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><p>使用<code>wx:for</code>控制属性绑定一个数组，从而使用数组中的数据重复渲染该组件。</p><p>默认数组的当前项的下标变量名默认为<code>index</code>，数组当前项的变量名默认为<code>item</code>，也可以使用<code>wx:for-index</code>和<code>wx:for-item</code>来指定。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--wxml--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;array&#125;&#125;"</span>&gt;</span> &#123;&#123;item&#125;&#125; <span class="tag">&lt;/<span class="name">view</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Page(&#123;</div><div class="line">  <span class="attr">data</span>: &#123;</div><div class="line">    <span class="attr">array</span>: [&#123;</div><div class="line">      <span class="attr">message</span>: <span class="string">'foo'</span>,</div><div class="line">    &#125;, &#123;</div><div class="line">      <span class="attr">message</span>: <span class="string">'bar'</span></div><div class="line">    &#125;]</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p><strong>将<code>wx:for</code>用在<code>&lt;block&gt;</code>标签上，可以渲染一个包含多个组件内容的结构块。</strong>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;[1, 2, 3]&#125;&#125;"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span> &#123;&#123;index&#125;&#125;: <span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span> &#123;&#123;item&#125;&#125; <span class="tag">&lt;/<span class="name">view</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">block</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="wx-key"><a href="#wx-key" class="headerlink" title="wx:key"></a>wx:key</h2><p>如果列表中项目的位置会动态改变或者有新的项目添加到列表中，并且希望列表中的项目保持自己的特征和状态（如 <code>&lt;input/&gt;</code> 中的输入内容，<code>&lt;switch/&gt;</code> 的选中状态），需要使用 <code>wx:key</code> 来指定列表中项目的唯一的标识符。</p><p><code>wx:key</code> 的值以两种形式提供</p><ol><li>字符串，代表在 for 循环的 array 中 item 的某个 property，该 property 的值需要是列表中唯一的字符串或数字，且不能动态改变。</li><li>保留关键字 <code>*this</code> 代表在 for 循环中的 item 本身，这种表示需要 item 本身是一个唯一的字符串或者数字。</li></ol><p><strong>如不提供<code>wx:key</code>，会报一个warning， 如果明确知道该列表是静态，或者不必关注其顺序，可以选择忽略。</strong></p><h1 id="图片使用"><a href="#图片使用" class="headerlink" title="图片使用"></a>图片使用</h1><p>使用<code>&lt;image&gt;</code>标签，其默认大小是宽300px、高225px。</p><p>属性：</p><ol><li><code>src</code>属性，填写图片资源的路径（相对路径）。</li><li><code>binderror</code>属性，发生错误时调用，不常用。</li><li><code>bindload</code>属性，载入完毕时调用，不常用。</li><li><code>mode</code>属性，指定图片裁剪、缩放的模式，其有效值如下。<strong><code>aspectFit</code>最常用</strong>。</li></ol><table><thead><tr><th style="text-align:center">模式</th><th style="text-align:center">值</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">缩放</td><td style="text-align:center"><code>scaleToFill</code></td><td style="text-align:center">不保持纵横比缩放图片，使图片的宽高完全拉伸至填满 image 元素</td></tr><tr><td style="text-align:center">缩放</td><td style="text-align:center"><code>aspectFit</code></td><td style="text-align:center">保持纵横比缩放图片，使图片的长边能完全显示出来。也就是说，可以完整地将图片显示出来。</td></tr><tr><td style="text-align:center">缩放</td><td style="text-align:center"><code>aspectFill</code></td><td style="text-align:center">保持纵横比缩放图片，只保证图片的短边能完全显示出来。也就是说，图片通常只在水平或垂直方向是完整的，另一个方向将会发生截取。</td></tr><tr><td style="text-align:center">缩放</td><td style="text-align:center"><code>widthFix</code></td><td style="text-align:center">宽度不变，高度自动变化，保持原图宽高比不变</td></tr><tr><td style="text-align:center">裁剪</td><td style="text-align:center"><code>top</code></td><td style="text-align:center">不缩放图片，只显示图片的顶部区域</td></tr><tr><td style="text-align:center">裁剪</td><td style="text-align:center"><code>bottom</code></td><td style="text-align:center">不缩放图片，只显示图片的底部区域</td></tr><tr><td style="text-align:center">裁剪</td><td style="text-align:center"><code>center</code></td><td style="text-align:center">不缩放图片，只显示图片的中间区域</td></tr><tr><td style="text-align:center">裁剪</td><td style="text-align:center"><code>left</code></td><td style="text-align:center">不缩放图片，只显示图片的左边区域</td></tr><tr><td style="text-align:center">裁剪</td><td style="text-align:center"><code>right</code></td><td style="text-align:center">不缩放图片，只显示图片的右边区域</td></tr><tr><td style="text-align:center">裁剪</td><td style="text-align:center"><code>top left</code></td><td style="text-align:center">不缩放图片，只显示图片的左上边区域</td></tr><tr><td style="text-align:center">裁剪</td><td style="text-align:center"><code>top right</code></td><td style="text-align:center">不缩放图片，只显示图片的右上边区域</td></tr><tr><td style="text-align:center">裁剪</td><td style="text-align:center"><code>bottom left</code></td><td style="text-align:center">不缩放图片，只显示图片的左下边区域</td></tr><tr><td style="text-align:center">裁剪</td><td style="text-align:center"><code>bottom right</code></td><td style="text-align:center">不缩放图片，只显示图片的右下边区域</td></tr></tbody></table><h1 id="数据缓存（storage）"><a href="#数据缓存（storage）" class="headerlink" title="数据缓存（storage）"></a>数据缓存（storage）</h1><p>每个小程序都有自己的本地缓存，可以通过<code>wx.setStorage</code>（<code>wx.setStorageSync</code>）、<code>wx.getStorage</code>（<code>wx.getStorageSync</code>）、<code>wx.clearStorage</code>（<code>wx.clearStorageSync</code>）可以对本地缓存进行设置、获取和清理。同一个微信用户，同一个小程序<code>storage</code>上限为 10MB。<code>localStorage</code>以用户维度隔离，同一台设备上，A 用户无法读取到 B 用户的数据。</p><p><strong>注意：</strong> 如果用户储存空间不足，小程序会清空最近最久未使用的本地缓存。因此不建议将关键信息全部存在<code>localStorage</code>，以防储存空间不足或用户换设备的情况。</p><h2 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h2><h3 id="wx-setStorage-OBJECT"><a href="#wx-setStorage-OBJECT" class="headerlink" title="wx.setStorage(OBJECT)"></a>wx.setStorage(OBJECT)</h3><p>将数据存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容，异步接口。</p><p><strong>OBJECT参数说明：</strong></p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">类型</th><th style="text-align:center">必填</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">key</td><td style="text-align:center">String</td><td style="text-align:center">是</td><td style="text-align:center">本地缓存中的指定的 key</td></tr><tr><td style="text-align:center">data</td><td style="text-align:center">Object/String</td><td style="text-align:center">是</td><td style="text-align:center">需要存储的内容</td></tr><tr><td style="text-align:center">success</td><td style="text-align:center">Function</td><td style="text-align:center">否</td><td style="text-align:center">接口调用成功的回调函数</td></tr><tr><td style="text-align:center">fail</td><td style="text-align:center">Function</td><td style="text-align:center">否</td><td style="text-align:center">接口调用失败的回调函数</td></tr><tr><td style="text-align:center">complete</td><td style="text-align:center">Function</td><td style="text-align:center">否</td><td style="text-align:center">接口调用结束的回调函数（调用成功、失败都会执行）</td></tr></tbody></table><p><strong>示例代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">wx.setStorage(&#123;</div><div class="line">  <span class="attr">key</span>:<span class="string">"key"</span>,</div><div class="line">  <span class="attr">data</span>:<span class="string">"value"</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure><h3 id="wx-setStorageSync-KEY-DATA"><a href="#wx-setStorageSync-KEY-DATA" class="headerlink" title="wx.setStorageSync(KEY,DATA)"></a>wx.setStorageSync(KEY,DATA)</h3><p>将 data 存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容，同步接口。</p><p><strong>OBJECT参数说明：</strong></p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">类型</th><th style="text-align:center">必填</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">key</td><td style="text-align:center">String</td><td style="text-align:center">是</td><td style="text-align:center">本地缓存中的指定的 key</td></tr><tr><td style="text-align:center">data</td><td style="text-align:center">Object/String</td><td style="text-align:center">是</td><td style="text-align:center">需要存储的内容</td></tr></tbody></table><p><strong>示例代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">wx.setStorageSync(<span class="string">'key'</span>, <span class="string">'value'</span>)</div><div class="line">&#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="数据获取"><a href="#数据获取" class="headerlink" title="数据获取"></a>数据获取</h2><h3 id="wx-getStorage-OBJECT"><a href="#wx-getStorage-OBJECT" class="headerlink" title="wx.getStorage(OBJECT)"></a>wx.getStorage(OBJECT)</h3><p>从本地缓存中异步获取指定 key 对应的内容。</p><p><strong>OBJECT参数说明：</strong></p><table><thead><tr><th>参数</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>key</td><td>String</td><td>是</td><td>本地缓存中的指定的 key</td></tr><tr><td>success</td><td>Function</td><td>是</td><td>接口调用的回调函数,res = {data: key对应的内容}</td></tr><tr><td>fail</td><td>Function</td><td>否</td><td>接口调用失败的回调函数</td></tr><tr><td>complete</td><td>Function</td><td>否</td><td>接口调用结束的回调函数（调用成功、失败都会执行）</td></tr></tbody></table><p><strong>success返回参数说明：</strong></p><table><thead><tr><th>参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>data</td><td>String</td><td>key对应的内容</td></tr></tbody></table><p><strong>示例代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">wx.getStorage(&#123;</div><div class="line">  <span class="attr">key</span>: <span class="string">'key'</span>,</div><div class="line">  <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(res.data)</div><div class="line">  &#125; </div><div class="line">&#125;)</div></pre></td></tr></table></figure><h3 id="wx-getStorageSync-KEY"><a href="#wx-getStorageSync-KEY" class="headerlink" title="wx.getStorageSync(KEY)"></a>wx.getStorageSync(KEY)</h3><p><strong>参数说明：</strong></p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">类型</th><th style="text-align:center">必填</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">key</td><td style="text-align:center">String</td><td style="text-align:center">是</td><td style="text-align:center">本地缓存中的指定的 key</td></tr></tbody></table><p><strong>示例代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">  <span class="keyword">var</span> value = wx.getStorageSync(<span class="string">'key'</span>)</div><div class="line">  <span class="keyword">if</span> (value) &#123;</div><div class="line">  <span class="comment">// Do something with return value</span></div><div class="line">  &#125;</div><div class="line">&#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">  <span class="comment">// Do something when catch error</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>wx.getStorageInfo(OBJECT)</code>和<code>wx.getStorageInfoSync</code>用户获取当前缓存信息。包括已存储的keys，当前占用大小和限制空间大小。</p><h2 id="数据移除"><a href="#数据移除" class="headerlink" title="数据移除"></a>数据移除</h2><h3 id="wx-removeStorage-OBJECT"><a href="#wx-removeStorage-OBJECT" class="headerlink" title="wx.removeStorage(OBJECT)"></a>wx.removeStorage(OBJECT)</h3><p>从本地缓存中异步移除指定 key 。</p><p><strong>OBJECT参数说明：</strong></p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">类型</th><th style="text-align:center">必填</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">key</td><td style="text-align:center">String</td><td style="text-align:center">是</td><td style="text-align:center">本地缓存中的指定的 key</td></tr><tr><td style="text-align:center">success</td><td style="text-align:center">Function</td><td style="text-align:center">是</td><td style="text-align:center">接口调用的回调函数</td></tr><tr><td style="text-align:center">fail</td><td style="text-align:center">Function</td><td style="text-align:center">否</td><td style="text-align:center">接口调用失败的回调函数</td></tr><tr><td style="text-align:center">complete</td><td style="text-align:center">Function</td><td style="text-align:center">否</td><td style="text-align:center">接口调用结束的回调函数（调用成功、失败都会执行）</td></tr></tbody></table><p><strong>示例代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">wx.removeStorage(&#123;</div><div class="line">  <span class="attr">key</span>: <span class="string">'key'</span>,</div><div class="line">  <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(res.data)</div><div class="line">  &#125; </div><div class="line">&#125;)</div></pre></td></tr></table></figure><h3 id="wx-removeStorageSync-KEY"><a href="#wx-removeStorageSync-KEY" class="headerlink" title="wx.removeStorageSync(KEY)"></a>wx.removeStorageSync(KEY)</h3><p>从本地缓存中同步移除指定 key 。</p><p><strong>参数说明：</strong></p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">类型</th><th style="text-align:center">必填</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">key</td><td style="text-align:center">String</td><td style="text-align:center">是</td><td style="text-align:center">本地缓存中的指定的 key</td></tr></tbody></table><p><strong>示例代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">  wx.removeStorageSync(<span class="string">'key'</span>)</div><div class="line">&#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">  <span class="comment">// Do something when catch error</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="数据清理"><a href="#数据清理" class="headerlink" title="数据清理"></a>数据清理</h2><h3 id="wx-clearStorage"><a href="#wx-clearStorage" class="headerlink" title="wx.clearStorage()"></a>wx.clearStorage()</h3><p>清理本地数据缓存。</p><p><strong>示例代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wx.clearStorage()</div></pre></td></tr></table></figure><h3 id="wx-clearStorageSync"><a href="#wx-clearStorageSync" class="headerlink" title="wx.clearStorageSync()"></a>wx.clearStorageSync()</h3><p>同步清理本地数据缓存</p><p><strong>示例代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">wx.clearStorageSync()</div><div class="line">&#125; <span class="keyword">catch</span>(e) &#123;</div><div class="line">  <span class="comment">// Do something when catch error</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="页面传值"><a href="#页面传值" class="headerlink" title="页面传值"></a>页面传值</h1><h2 id="url携带参数"><a href="#url携带参数" class="headerlink" title="url携带参数"></a>url携带参数</h2><p>前面提到，在页面跳转的时候，会使用到<code>wx.navigateTo</code>或者<code>wx.redirectTo</code>方法，在其中需要指定目标页面的<code>url</code>路径，此时我们可以在url末尾来携带参数，多个参数之间使用<code>&amp;</code>来连接。然后在目标页面的<code>onLoad()</code>函数中获取这些url参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 初始页面A相关代码</span></div><div class="line">wx.navigateTo(&#123;</div><div class="line">  <span class="keyword">var</span> b = <span class="number">2</span></div><div class="line">  url: <span class="string">"/pages/page/page?a=1&amp;b="</span> + b </div><div class="line">&#125;)</div><div class="line"> </div><div class="line"><span class="comment">// 目标页面B相关代码</span></div><div class="line">Page(&#123;</div><div class="line">  <span class="attr">onLoad</span>: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> a = options.a; <span class="comment">// 值：1</span></div><div class="line">    <span class="keyword">var</span> b = options.b; <span class="comment">// 值：2</span></div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>由于一个页面的<code>onLoad()</code>方法在页面的生命周期中只执行一次，因此这种方法只在目标页面还没有创建的时候，才有效。</p><h2 id="使用全局数据存储"><a href="#使用全局数据存储" class="headerlink" title="使用全局数据存储"></a>使用全局数据存储</h2><ol><li>将要传递的数据，存储在<code>App</code>对象上。</li><li>将要传递的数据，存储在小程序的本地数据缓存（<code>Storage</code>）中。</li></ol><p>如，在我们即将进入下一个页面时，可以使用以下方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1. 存储到app对象上的方式</span></div><div class="line"><span class="keyword">var</span> app = getApp()</div><div class="line">app.globalData.mydata = &#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>&#125;;  <span class="comment">//存储数据到app对象上</span></div><div class="line">wx.navigateBack();  <span class="comment">//返回上一个页面</span></div><div class="line"> </div><div class="line"><span class="comment">// 2.存储到数据缓存的方式</span></div><div class="line">wx.setStorage(&#123;</div><div class="line">  <span class="attr">key</span>: <span class="string">"mydata"</span>,</div><div class="line">  <span class="attr">data</span>: &#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>&#125;,</div><div class="line">  <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    wx.navigateBack();   <span class="comment">//返回上一个页面</span></div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>当打开新页面的时候，就可以通过读取全局存储区域，从而获取到数据。但由于是全局数据，因此在管理上可以会有风险，若一不小心被销毁，就会出现程序错误。</p><h2 id="获取页面栈-1"><a href="#获取页面栈-1" class="headerlink" title="获取页面栈"></a>获取页面栈</h2><p>这种方式，是通过调用小程序的<code>API: getCurrentPages()</code>，来获取当前页面路由栈的信息，然后通过原型方法<code>setData</code>对当前对象管理的 <code>data</code>进行修改。如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//pageA.js</span></div><div class="line">...</div><div class="line">Page(&#123;</div><div class="line">  <span class="attr">data</span>: &#123;</div><div class="line">    <span class="attr">index</span>: <span class="number">1</span></div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>当跳转到下一个页面B之后，加入在B中有操作需要修改A中的index，则可以使用以下方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">pageB.js</div><div class="line">...</div><div class="line">Page(&#123;</div><div class="line">  <span class="attr">changeIndexInE</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> pages = getCurrentPages();</div><div class="line">    <span class="keyword">var</span> prevPage = pages[pages.length - <span class="number">2</span>];</div><div class="line">    prevPage.setData(&#123;</div><div class="line">      <span class="attr">index</span>: <span class="number">0</span></div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>比起全局数据存储的方式，这种方式在逻辑上要清晰得多，也不存在对数据的销毁有额外的管理工作。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;上一篇文章写的是开发微信小程序的基础性内容，从这一篇开始主要记录我在实际开发过程中一些比较重要的内容，或者某一个问题的具体实现方法。主要根据各个网站、博客、帖子、教程的相关资料，结合自己的开发经验整理而成，内容结构和关联性不强，按点排列，供以后查找
      
    
    </summary>
    
      <category term="小程序" scheme="http://yoursite.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="微信" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="小程序" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>小程序踩坑记录（一）——开发起步</title>
    <link href="http://yoursite.com/2018/11/12/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%BC%80%E5%8F%91%E8%B5%B7%E6%AD%A5/"/>
    <id>http://yoursite.com/2018/11/12/小程序踩坑记录（一）——开发起步/</id>
    <published>2018-11-12T09:41:10.711Z</published>
    <updated>2018-11-12T09:41:10.715Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近在校外做微信小程序开发的实习，从零开始，边学边做。两周之后已经基本实现了小程序的所有页面，趁着比较闲，写写总结，一方面打发时间，一方面方便自己日后查看使用。当然，要是有“有缘人”愿意看一看就更好了。</p></blockquote><h1 id="开发前的准备"><a href="#开发前的准备" class="headerlink" title="开发前的准备"></a>开发前的准备</h1><h2 id="开发者身份"><a href="#开发者身份" class="headerlink" title="开发者身份"></a>开发者身份</h2><p>首先需要去<a href="https://mp.weixin.qq.com/" target="_blank" rel="external">微信公众平台</a>申请一个账号，账号分为个人用户和企业用户，需要注意的是个人用户是不能够发布小程序的，只能够写写Demo自己玩。注册登录之后，可以在控制台看到用户身份，在里面可以进行开发协作管理，添加项目成员以及分配权限。</p><h2 id="AppID"><a href="#AppID" class="headerlink" title="AppID"></a>AppID</h2><p>小程序的AppID相当于小程序平台的一个身份证，在开发过程中会经常用到。在微信公众平台的【设置】中，点击【开发设置】，就可以查看到自己的AppID。</p><h2 id="开发工具下载"><a href="#开发工具下载" class="headerlink" title="开发工具下载"></a>开发工具下载</h2><p>前往<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html?t=18110719" target="_blank" rel="external">官方下载平台</a>可以下载开发者工具，自行安装即可。虽说也可以使用其他的编辑器写代码，但就小程序而言，官方的工具拥有比较全面的调试、预览等功能，建议使用。</p><h1 id="创建小程序"><a href="#创建小程序" class="headerlink" title="创建小程序"></a>创建小程序</h1><p>打开小程序开发者工具，使用微信扫码登录开发者工具，进入到小程序项目添加的页面。在项目目录里面选择代码存放的硬盘路径（注意需要使用一个空白文件夹），填入刚获得的AppID，输入项目名称，在下面选择建立“普通快速启动模板”，建议勾选该项，这样会帮你自动建立小程序开发的目录结构。</p><p><img src="https://raw.githubusercontent.com/ShawHee/MyPhotos/master/%E5%88%9B%E5%BB%BA%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%A1%B9%E7%9B%AE.png" alt="添加项目"></p><h1 id="开发者工具简介"><a href="#开发者工具简介" class="headerlink" title="开发者工具简介"></a>开发者工具简介</h1><p><img src="https://raw.githubusercontent.com/ShawHee/MyPhotos/master/%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7.png" alt="开发者工具界面"></p><p>在工具上方是工具栏，主体部分由四个部分组成，左边是小程序的预览图，可以在上方选择模拟器的手机型号和显示比例等，中间是小程序的代码目录，右边是代码编辑区，下方是控制台。在工具台可以选择编译模式，一般就使用“普通编译”；上方有【编译】按钮，但实际上Ctrl（Command）+ S保存代码的时候会自动进行编译；【预览】和【真机调试】都需要微信扫码，需要注意的是，只有将用户添加到项目成员并给予开发者权限才能够使用该功能。</p><h1 id="小程序代码构成"><a href="#小程序代码构成" class="headerlink" title="小程序代码构成"></a>小程序代码构成</h1><p>在目录里面，可以看到项目自动生成了一些目录和文件。其中，有四种不同类型的文件：</p><ol><li>.json后缀的JSON文件</li><li>.wxml后缀的WXML模板文件</li><li>.wxss后缀的WXSS样式文件</li><li>.js后缀的JS脚本逻辑文件</li></ol><h2 id="JSON文件"><a href="#JSON文件" class="headerlink" title="JSON文件"></a>JSON文件</h2><p>json文件一共有三种，app.json是小程序的全局配置，包括页面路径、界面表现、导航栏设置、网络超时时间等，分为pages（页面）字段和windows（页面顶部）字段。需要注意的是：页面路径里面，系统默认排在第一个的页面是小程序的初始页面。</p><p>project.config.json保存的主要是用户的个性化配置，比如界面颜色、编译配置，当重新安装工具或者换电脑时，只要载入之前的文件，开发者工具就会自动恢复之前的个性化配置。</p><p>page.json文件。在每一个页面目录下都有一个json文件，和app.json的区别在于，其中只能使用windows字段的内容。app.json负责对全局进行配置，而page.json对每一个页面的属性进行独立的配置。<strong>局部json的配置会自动覆盖全局json的配置。</strong></p><h2 id="WXML文件"><a href="#WXML文件" class="headerlink" title="WXML文件"></a>WXML文件</h2><p>写过前端的人知道，在网页编程里面使用的主要是HTML+CSS+JavaScript，小程序里面也大致是这样，WXML负责描述页面的结构和内容，WXSS用户描述页面的样式，JS则用来处理页面和用户的交互。</p><p>WXML和HTML十分相似，都是由标签和属性组成，但是标签使用上有一些区别，针对小程序的特点，将很多组件包装了起来，以标签的形式提供给开发者使用，比如地图、弹窗等。同时，WXML还有wx:if这样的属性用来控制内容显示，&amp;#123&amp;#123&amp;#125&amp;#125表达式用于将渲染和逻辑分离，在WXML里面使用变量名，在JS里面使用this.setData函数来修改变量内容，并实时渲染到页面上。</p><p>WXSS具有大部分CSS的特性，需要注意的是其新增加了一个尺寸单位。为了对不同的手机设备继续适配，WXSS采用了rpx单位，其值等于用户手机设备的宽/750，即默认所有的屏幕宽度都是750rpx，在渲染时，由小程序底层自动计算实际的大小。但是换算采用的是浮点数运算，所以可能有一些误差。此外，小程序开发中，一些组件需要在js里面进行样式制作，也就无法使用rpx单位，需要自行处理，此部分在后续的文章里面会进行描述。</p><h2 id="JS文件"><a href="#JS文件" class="headerlink" title="JS文件"></a>JS文件</h2><p>JS的语法就没什么好说的，在page.js文件里面会默认有一个data内容，在里面定义的对象可以通过&amp;#123&amp;#123&amp;#125&amp;#125的形式在WXML文件里面使用，并通过this.setData进行修改，以达到逻辑层和渲染层分离和实时渲染的目的。</p><h1 id="协作开发-版本管理"><a href="#协作开发-版本管理" class="headerlink" title="协作开发 版本管理"></a>协作开发 版本管理</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>我自己在开发过程中主要通过Git+码云来实现代码的版本控制，在这里仅简单介绍一下。首先需要在<a href="https://gitee.com" target="_blank" rel="external">码云</a>里面注册一个账号，随后创建一个项目。在微信开发者工具里面找到工具栏的【版本管理】，单击进行后会提示初始化Git仓库，点击确认即可，这一步相当于执行 git int命令。</p><p><img src="https://raw.githubusercontent.com/ShawHee/MyPhotos/master/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6.png" alt="版本控制界面"></p><h2 id="配置仓库信息"><a href="#配置仓库信息" class="headerlink" title="配置仓库信息"></a>配置仓库信息</h2><p>初始化完成后，就可以看到本地的仓库和当前Git状态。然后在【工作空间】里面点击进入【设置】页面，【通用】里面选择编辑用户信息，填写码云的邮箱账号和自己的用户名，在进入【远程】选项卡，添加远程仓库，填写名称（自定）和仓库链接即可。</p><p>点击【网络和认证】选项卡里面选择认证方式为“使用用户名和密码”，输入码云的账号和密码，到此配置就已经完成。</p><h2 id="修改和提交代码"><a href="#修改和提交代码" class="headerlink" title="修改和提交代码"></a>修改和提交代码</h2><p>修改代码之后，进入【版本控制】页面，在【工作区】可以看到被修改的文件，在下方填写标题，并提交，就可以将代码提交到本地分支里面。点击上方的【推送】，填写分支信息，点击确定就可以将代码提交到远程仓库。之后可以使用【抓取】和【拉取】功能，从远程仓库里面合并其他人的代码。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>此部分主要是对小程序开发前的准备工作、开发工具、代码结构进行了简单的介绍，后面的部分就主要是一些具体的功能代码，会比较零散，以后当做开发字典使用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;最近在校外做微信小程序开发的实习，从零开始，边学边做。两周之后已经基本实现了小程序的所有页面，趁着比较闲，写写总结，一方面打发时间，一方面方便自己日后查看使用。当然，要是有“有缘人”愿意看一看就更好了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 
      
    
    </summary>
    
      <category term="小程序" scheme="http://yoursite.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="微信" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="小程序" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java synchronized详解</title>
    <link href="http://yoursite.com/2018/11/12/synchronized/"/>
    <id>http://yoursite.com/2018/11/12/synchronized/</id>
    <published>2018-11-12T05:09:36.142Z</published>
    <updated>2018-11-12T05:09:36.142Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>synchronized</strong> 是Java语言的关键字，当它用来修饰一个方法或者一个代码块的时候，能够保证在同一时刻最多只有一个线程执行该段代码。</p></blockquote><hr><ol><li>当两个并发线程访问同一个对象 <em>object</em> 中的这个<em>synchronized(this)</em>同步代码块时，一个时间内只能有一个线程得到执行。另一个线程必须等待当前线程执行完这个代码块以后才能执行该代码块。</li><li>然而，当一个线程访问 <em>object</em> 的一个synchronized(this)同步代码块时，另一个线程仍然可以访问该 <em>object</em> 中的非 <em>synchronized(this)</em> 同步代码块。</li><li>尤其关键的是，当一个线程访问 <em>object</em> 的一个 <em>synchronized(this)</em> 同步代码块时，其他线程对 <em>object</em> 中所有其它 <em>synchronized(this)</em> 同步代码块的访问将被阻塞。</li><li>第三个例子同样适用其它同步代码块。也就是说，当一个线程访问 <em>object</em> 的一个 <em>synchronized(this)</em> 同步代码块时，它就获得了这个 <em>object</em> 的对象锁。结果，其它线程对该 <em>object</em> 对象所有同步代码部分的访问都被暂时阻塞。</li><li>以上规则对其它对象锁同样适用.</li></ol><hr><p>##举例说明<br><strong>.当两个并发线程访问同一个对象 <em>object</em> 中的这个synchronized(this)同步代码块时，一个时间内只能有一个线程得到执行。另一个线程必须等待当前线程执行完这个代码块以后才能执行该代码块。</strong></p><hr> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> ths;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread1</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123; </div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</div><div class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123; </div><div class="line">               System.out.println(Thread.currentThread().getName() + <span class="string">" synchronized loop "</span> + i);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">       Thread1 t1 = <span class="keyword">new</span> Thread1();</div><div class="line">       Thread ta = <span class="keyword">new</span> Thread(t1, <span class="string">"A"</span>);</div><div class="line">       Thread tb = <span class="keyword">new</span> Thread(t1, <span class="string">"B"</span>);</div><div class="line">       ta.start();</div><div class="line">       tb.start();</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p> 输出结果：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">A synchronized loop 0  </div><div class="line">A synchronized loop 1  </div><div class="line">A synchronized loop 2  </div><div class="line">A synchronized loop 3  </div><div class="line">A synchronized loop 4  </div><div class="line">B synchronized loop 0  </div><div class="line">B synchronized loop 1  </div><div class="line">B synchronized loop 2  </div><div class="line">B synchronized loop 3  </div><div class="line">B synchronized loop 4</div></pre></td></tr></table></figure></p><p> <strong>2.当一个线程访问<em>object</em>的一个<em>synchronized(this)</em>同步代码块时，另一个线程仍然可以访问该<em>object</em>中的非<em>synchronized(this)</em>同步代码块。</strong><br> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> ths;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread2</span> </span>&#123;  </div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m4t1</span><span class="params">()</span> </span>&#123;  </div><div class="line">          <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;  </div><div class="line">               <span class="keyword">int</span> i = <span class="number">5</span>;  </div><div class="line">               <span class="keyword">while</span>( i-- &gt; <span class="number">0</span>) &#123;  </div><div class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">" : "</span> + i);  </div><div class="line">                    <span class="keyword">try</span> &#123;  </div><div class="line">                         Thread.sleep(<span class="number">500</span>);  </div><div class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;  </div><div class="line">                    &#125;  </div><div class="line">               &#125;  </div><div class="line">          &#125;  </div><div class="line">     &#125;  </div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m4t2</span><span class="params">()</span> </span>&#123;  </div><div class="line">          <span class="keyword">int</span> i = <span class="number">5</span>;  </div><div class="line">          <span class="keyword">while</span>( i-- &gt; <span class="number">0</span>) &#123;  </div><div class="line">               System.out.println(Thread.currentThread().getName() + <span class="string">" : "</span> + i);  </div><div class="line">               <span class="keyword">try</span> &#123;  </div><div class="line">                    Thread.sleep(<span class="number">500</span>);  </div><div class="line">               &#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;  </div><div class="line">               &#125;  </div><div class="line">          &#125;  </div><div class="line">     &#125;  </div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">          <span class="keyword">final</span> Thread2 myt2 = <span class="keyword">new</span> Thread2();  </div><div class="line">          Thread t1 = <span class="keyword">new</span> Thread(  <span class="keyword">new</span> Runnable() &#123;  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  myt2.m4t1();  &#125;  &#125;, <span class="string">"t1"</span>  );  </div><div class="line">          Thread t2 = <span class="keyword">new</span> Thread(  <span class="keyword">new</span> Runnable() &#123;  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; myt2.m4t2();   &#125;  &#125;, <span class="string">"t2"</span>  );  </div><div class="line">          t1.start();  </div><div class="line">          t2.start();  </div><div class="line">     &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p> 输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">t1 : 4  </div><div class="line">t2 : 4  </div><div class="line">t1 : 3  </div><div class="line">t2 : 3  </div><div class="line">t1 : 2  </div><div class="line">t2 : 2  </div><div class="line">t1 : 1  </div><div class="line">t2 : 1  </div><div class="line">t1 : 0  </div><div class="line">t2 : 0</div></pre></td></tr></table></figure></p><p> <strong>3.尤其关键的是，当一个线程访问<em>object</em>的一个<em>synchronized(this)</em>同步代码块时，其他线程对<em>object</em>中所有其它<em>synchronized(this)</em>同步代码块的访问将被阻塞。</strong><br> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//修改Thread2.m4t2()方法：</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m4t2</span><span class="params">()</span> </span>&#123;  </div><div class="line">     <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;  </div><div class="line">          <span class="keyword">int</span> i = <span class="number">5</span>;  </div><div class="line">          <span class="keyword">while</span>( i-- &gt; <span class="number">0</span>) &#123;  </div><div class="line">               System.out.println(Thread.currentThread().getName() + <span class="string">" : "</span> + i);  </div><div class="line">               <span class="keyword">try</span> &#123;  </div><div class="line">                    Thread.sleep(<span class="number">500</span>);  </div><div class="line">               &#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;  </div><div class="line">               &#125;  </div><div class="line">          &#125;  </div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p> 输出结果：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">t1 : 4  </div><div class="line">t1 : 3  </div><div class="line">t1 : 2  </div><div class="line">t1 : 1  </div><div class="line">t1 : 0  </div><div class="line">t2 : 4  </div><div class="line">t2 : 3  </div><div class="line">t2 : 2  </div><div class="line">t2 : 1  </div><div class="line">t2 : 0</div></pre></td></tr></table></figure></p><p><strong>4.第三个例子同样适用其它同步代码块。也就是说，当一个线程访问<em>object</em>的一个<em>synchronized(this)</em>同步代码块时，它就获得了这个<em>object</em>的对象锁。结果，其它线程对该<em>object</em>对象所有同步代码部分的访问都被暂时阻塞。</strong><br> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//修改Thread2.m4t2()方法如下：</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m4t2</span><span class="params">()</span> </span>&#123;  </div><div class="line">     <span class="keyword">int</span> i = <span class="number">5</span>;  </div><div class="line">     <span class="keyword">while</span>( i-- &gt; <span class="number">0</span>) &#123;  </div><div class="line">          System.out.println(Thread.currentThread().getName() + <span class="string">" : "</span> + i);  </div><div class="line">          <span class="keyword">try</span> &#123;  </div><div class="line">               Thread.sleep(<span class="number">500</span>);  </div><div class="line">          &#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;  </div><div class="line">          &#125;  </div><div class="line">     &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">t1 : 4  </div><div class="line">t1 : 3  </div><div class="line">t1 : 2  </div><div class="line">t1 : 1  </div><div class="line">t1 : 0  </div><div class="line">t2 : 4  </div><div class="line">t2 : 3  </div><div class="line">t2 : 2  </div><div class="line">t2 : 1  </div><div class="line">t2 : 0</div></pre></td></tr></table></figure></p><p><strong>5.以上规则对其它对象锁同样适用:</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> ths;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread3</span> </span>&#123; </div><div class="line">     <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123; </div><div class="line">          <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">m4t1</span><span class="params">()</span> </span>&#123; </div><div class="line">               <span class="keyword">int</span> i = <span class="number">5</span>; </div><div class="line">               <span class="keyword">while</span>(i-- &gt; <span class="number">0</span>) &#123; </div><div class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">" : Inner.m4t1()="</span> + i); </div><div class="line">                    <span class="keyword">try</span> &#123; </div><div class="line">                         Thread.sleep(<span class="number">500</span>); </div><div class="line">                    &#125; <span class="keyword">catch</span>(InterruptedException ie) &#123; </div><div class="line">                    &#125; </div><div class="line">               &#125; </div><div class="line">          &#125; </div><div class="line">          <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">m4t2</span><span class="params">()</span> </span>&#123; </div><div class="line">               <span class="keyword">int</span> i = <span class="number">5</span>; </div><div class="line">               <span class="keyword">while</span>(i-- &gt; <span class="number">0</span>) &#123; </div><div class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">" : Inner.m4t2()="</span> + i); </div><div class="line">                    <span class="keyword">try</span> &#123; </div><div class="line">                         Thread.sleep(<span class="number">500</span>); </div><div class="line">                    &#125; <span class="keyword">catch</span>(InterruptedException ie) &#123; </div><div class="line">                    &#125; </div><div class="line">               &#125; </div><div class="line">          &#125; </div><div class="line">     &#125; </div><div class="line">     <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">m4t1</span><span class="params">(Inner inner)</span> </span>&#123; </div><div class="line">          <span class="keyword">synchronized</span>(inner) &#123; <span class="comment">//使用对象锁 </span></div><div class="line">          inner.m4t1(); </div><div class="line">     &#125; </div><div class="line">     <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">m4t2</span><span class="params">(Inner inner)</span> </span>&#123; </div><div class="line">          inner.m4t2(); </div><div class="line">     &#125; </div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </div><div class="line">          <span class="keyword">final</span> Thread3 myt3 = <span class="keyword">new</span> Thread3(); </div><div class="line">          <span class="keyword">final</span> Inner inner = myt3.new Inner(); </div><div class="line">          Thread t1 = <span class="keyword">new</span> Thread( <span class="keyword">new</span> Runnable() &#123;<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; myt3.m4t1(inner);&#125; &#125;, <span class="string">"t1"</span>); </div><div class="line">     Thread t2 = <span class="keyword">new</span> Thread( <span class="keyword">new</span> Runnable() &#123;<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; myt3.m4t2(inner);&#125; &#125;, <span class="string">"t2"</span>); </div><div class="line">     t1.start(); </div><div class="line">     t2.start(); </div><div class="line">  &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p> 输出结果：</p><p> 　　尽管线程t1获得了对Inner的对象锁，但由于线程t2访问的是同一个Inner中的非同步部分。所以两个线程互不干扰。<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">t1 : Inner.m4t1()=<span class="number">4</span>  </div><div class="line">t2 : Inner.m4t2()=<span class="number">4</span>  </div><div class="line">t1 : Inner.m4t1()=<span class="number">3</span>  </div><div class="line">t2 : Inner.m4t2()=<span class="number">3</span>  </div><div class="line">t1 : Inner.m4t1()=<span class="number">2</span>  </div><div class="line">t2 : Inner.m4t2()=<span class="number">2</span>  </div><div class="line">t1 : Inner.m4t1()=<span class="number">1</span>  </div><div class="line">t2 : Inner.m4t2()=<span class="number">1</span>  </div><div class="line">t1 : Inner.m4t1()=<span class="number">0</span>  </div><div class="line">t2 : Inner.m4t2()=<span class="number">0</span></div></pre></td></tr></table></figure></p><p>　　现在在Inner.m4t2()前面加上<em>synchronized</em>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m4t2</span><span class="params">()</span> </span>&#123;  </div><div class="line">     <span class="keyword">int</span> i = <span class="number">5</span>;  </div><div class="line">     <span class="keyword">while</span>(i-- &gt; <span class="number">0</span>) &#123;  </div><div class="line">          System.out.println(Thread.currentThread().getName() + <span class="string">" : Inner.m4t2()="</span> + i);  </div><div class="line">          <span class="keyword">try</span> &#123;  </div><div class="line">               Thread.sleep(<span class="number">500</span>);  </div><div class="line">          &#125; <span class="keyword">catch</span>(InterruptedException ie) &#123;  </div><div class="line">          &#125;  </div><div class="line">     &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>输出结果：</p><p>　　尽管线程t1与t2访问了同一个Inner对象中两个毫不相关的部分,但因为t1先获得了对Inner的对象锁，所以t2对Inner.m4t2()的访问也被阻塞，因为m4t2()是Inner中的一个同步方法。<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">t1 : Inner.m4t1()=4  </div><div class="line">t1 : Inner.m4t1()=3  </div><div class="line">t1 : Inner.m4t1()=2  </div><div class="line">t1 : Inner.m4t1()=1  </div><div class="line">t1 : Inner.m4t1()=0  </div><div class="line">t2 : Inner.m4t2()=4  </div><div class="line">t2 : Inner.m4t2()=3  </div><div class="line">t2 : Inner.m4t2()=2  </div><div class="line">t2 : Inner.m4t2()=1  </div><div class="line">t2 : Inner.m4t2()=0</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;synchronized&lt;/strong&gt; 是Java语言的关键字，当它用来修饰一个方法或者一个代码块的时候，能够保证在同一时刻最多只有一个线程执行该段代码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;当两个并
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="synchronized" scheme="http://yoursite.com/tags/synchronized/"/>
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>念念不忘，必有回响</title>
    <link href="http://yoursite.com/2018/09/30/%E5%BF%B5%E5%BF%B5%E4%B8%8D%E5%BF%98/"/>
    <id>http://yoursite.com/2018/09/30/念念不忘/</id>
    <published>2018-09-30T14:52:31.436Z</published>
    <updated>2018-09-30T14:52:31.437Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>　　梦一样的九月转眼就结束了，现在想想还是觉得有些不可思议，月初的时候还过着早八晚十的图书馆考研生活，现在却躺在家里的床上无聊地写着博客。六号的时候在空间转发了那只白色的可爱小狐狸，开玩笑一般地让珞珈山神兽“保佑我九月诸事顺心”，没想到真的是好运不断。</p></blockquote><h1 id="皆有所得"><a href="#皆有所得" class="headerlink" title="皆有所得"></a>皆有所得</h1><h2 id="保研"><a href="#保研" class="headerlink" title="保研"></a>保研</h2><p>　　转发完小狐狸的当天下午就得知我们班有6个保研名额，我恰好排名第8，又听说排在前面的两名同学大概率会出国，没过两天这一点也确定了，于是就这样获得了推免资格。</p><h2 id="双学位毕设"><a href="#双学位毕设" class="headerlink" title="双学位毕设"></a>双学位毕设</h2><p>　　在暑假准备考研的时候，想着自己需要专心复习（当然这也可能是给自己偷懒找的借口），就很早跟论文指导老师说自己放弃毕设。本来以为这件事注定会成为我大学生活的一大遗憾，但当保研确定之后，又突然想完成这个毕设。当时应该是9号前后，按照通知上的要求，17号查重，18号答辩，我还有一周多一点的时间。再次联系指导老师，很幸运老师表示了支持和鼓励，告诉我可以尽快选一个自己熟悉的方向完成初稿，答辩完之后还有10天可以修改。于是半天构思，三天半写代码，三天写论文，还留了一天完善和改重。提交之前自己查怎么也没低于10%的论文，老师发给我的报告显示是1.7%，随后答辩也得到了老师“总体结构内容不错，存在一些小问题”的评价。</p><h2 id="成绩"><a href="#成绩" class="headerlink" title="成绩"></a>成绩</h2><p>　　上学期双学位的考试一直还有两门成绩没有出来，恰好又是我比较担心的科目：系统结构和算法设计。尤其是系统结构，基本靠考前突击。记得考试的时候，老师还问同学复习了多久，一个说一周，一个说两周，还好没问我，不然说两天多尴尬。在做毕设的时候，突然在群里看到有人说成绩出来了，赶紧登上系统，长舒一口气：80，95。</p><h2 id="专业"><a href="#专业" class="headerlink" title="专业"></a>专业</h2><p>　　获得保研资格的时候已经是九月中旬了，由于之前一直在准备考研，没有参加什么夏令营或者保研面试，就放弃了去其他学校的念头，把目标转向了本院新开的数据科学专业。但是有个问题是，这个专业理论上只招理工科背景的学生。后来去找徐老师咨询志愿的时候，提到了我修过华科计算机的事情，她说到时候会给学院反馈一下。到填报志愿的那天，早上估摸着快上班了，再次给她发短信表明了自己的兴趣和意愿，终于在快中午的时候收到了待录取通知。</p><h2 id="奖学金"><a href="#奖学金" class="headerlink" title="奖学金"></a>奖学金</h2><p>　　九月份由于各种事情交错在一起，奖学金方面就抱着比较随意的心态申报了，材料也没花什么心思准备。班级初审的时候总评第3，后来学院审核变成了第5，从乙等变成了丙等，但是自己就很佛系，完全没啥感觉。刚才晚上看到通知，获得了国励，也算是很不错的结果了。</p><h1 id="过程不易"><a href="#过程不易" class="headerlink" title="过程不易"></a>过程不易</h1><p>　　看起来一切都是很顺利，但是过程还是只有自己知道。</p><p>　　整个九月份精神状态和睡眠状态就很不好，半夜经常惊醒，早上一般到了6点就再也睡不着；做毕设期间为了省时间改变了睡午觉的习惯，等到答辩结束后想睡个午觉，躺下没多久就会醒过来，总觉得有什么事情没做完；噩梦也是常有，印象最深的有两次，第一次梦到自己的电脑进水不能用了，开始好像觉得问题不大，在算自己能攒出多少钱买新的，突然想到自己的源代码和论文都在电脑里面，马上就被吓醒了，第二次则是梦到自己填的志愿没被录取；经常写代码写到头疼，有天晚上修仙突然开始流鼻血，还以为自己要猝死了……</p><h1 id="未来可期"><a href="#未来可期" class="headerlink" title="未来可期"></a>未来可期</h1><p>　　写了这么多，并不是想秀自己的好运，也不是抱怨自己有多累。18号结束答辩看了电影《风语咒》，晚上在学校散步的时候，满脑子都是八个字“念念不忘，必有回响”，这就是我想表达的。没有什么是可以轻易获得的，背后必然有巨大的努力。我也很庆幸，自己的付出没有白费，虽然和身边优秀的同学相比还差得很远，但总算是有所收获，大学生活没有虚度。很感谢这段时间亲人、老师、朋友对我的关心和支持，感谢那只不幸离世的小狐狸，也希望各位同学的努力都会有结果，都能收获自己想要的。</p><p>　　在论文致谢的最后一段，写的是“希望这篇论文不是我计算机学习的结束，而是一个新的开始”，现在我应该就站在这个起点上，未来可期，继续加油！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;　　梦一样的九月转眼就结束了，现在想想还是觉得有些不可思议，月初的时候还过着早八晚十的图书馆考研生活，现在却躺在家里的床上无聊地写着博客。六号的时候在空间转发了那只白色的可爱小狐狸，开玩笑一般地让珞珈山神兽“保佑我九月诸事顺心”，没想到真的是好运不
      
    
    </summary>
    
      <category term="日记" scheme="http://yoursite.com/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="大学" scheme="http://yoursite.com/tags/%E5%A4%A7%E5%AD%A6/"/>
    
      <category term="生活" scheme="http://yoursite.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>最怕学霸秀恩爱</title>
    <link href="http://yoursite.com/2018/06/15/%E6%9C%80%E6%80%95%E5%AD%A6%E9%9C%B8%E7%A7%80%E6%81%A9%E7%88%B1/"/>
    <id>http://yoursite.com/2018/06/15/最怕学霸秀恩爱/</id>
    <published>2018-06-15T15:16:00.628Z</published>
    <updated>2018-06-15T15:16:00.629Z</updated>
    
    <content type="html"><![CDATA[<p>俗话说，在学校最难受的三件事是：</p><ol><li>看学霸秀成绩</li><li>看情侣秀恩爱</li><li>看土豪炫富</li></ol><p>比这更难受的三件事是：</p><ol><li>看学霸秀恩爱</li><li>看土豪秀成绩</li><li>看情侣炫富</li></ol><p>今天就被一对学霸秀了一脸，在此先记下这个仇了……</p><p><img src="https://raw.githubusercontent.com/ShawHee/MyPhotos/master/2018-6-15_%E7%BE%BD%E8%8C%9C%E5%A7%90%E5%A7%90%E5%92%8C%E5%A7%90%E5%A4%AB1.jpg" alt="yuxi"></p><center><em>PS:这张图是某人自己P的，摄影来自对面的我</em></center><p>没错就是这两个人，两个不折不扣的学霸，分别保研了北大和武大，成绩好，颜值高，气质佳，能力强，极具音乐天赋，刚才还跟我说自小担任文艺委员，小学钢琴考了8级，emmm。</p><p><img src="https://raw.githubusercontent.com/ShawHee/MyPhotos/master/2018-6-15_%E7%BE%BD%E8%8C%9C%E5%A7%90%E5%A7%90%E5%92%8C%E5%A7%90%E5%A4%AB3.jpg" alt="yuxi"></p><p>在大一上党课的时候认识了姐夫，被他“骗”进联席会后又认识了羽茜姐姐，后来才知道他们两的关系，还知道了他们也是在联席会认识的……虽然作为单身狗，经常被他们两秀一脸，但还是很感谢他们这两年来对我的帮助，不光是联席会材料和党课的工作，还有学习和生活，一直以来都把他们当作学习的榜样。教我理清复杂的入党材料，带我做好党课班长，用”专业课90+一点也不难“、”不拿国奖不带我玩“来激励我学习，晚上请我吃饭还因为吃辣把嗓子吃坏了……</p><p>临近毕业，别无所赠，只有祝福了，希望你们学业顺利，幸福美满，一直恩爱下去。（记得以后带我去北大玩）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;俗话说，在学校最难受的三件事是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;看学霸秀成绩&lt;/li&gt;
&lt;li&gt;看情侣秀恩爱&lt;/li&gt;
&lt;li&gt;看土豪炫富&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;比这更难受的三件事是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;看学霸秀恩爱&lt;/li&gt;
&lt;li&gt;看土豪秀成绩&lt;/li&gt;
&lt;l
      
    
    </summary>
    
      <category term="日记" scheme="http://yoursite.com/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="大学" scheme="http://yoursite.com/tags/%E5%A4%A7%E5%AD%A6/"/>
    
      <category term="生活" scheme="http://yoursite.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="记仇" scheme="http://yoursite.com/tags/%E8%AE%B0%E4%BB%87/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 41 缺失的第一个正数</title>
    <link href="http://yoursite.com/2018/06/15/LeetCode%2041%20%E7%BC%BA%E5%A4%B1%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%AD%A3%E6%95%B0/"/>
    <id>http://yoursite.com/2018/06/15/LeetCode 41 缺失的第一个正数/</id>
    <published>2018-06-15T15:14:23.765Z</published>
    <updated>2018-06-15T15:14:23.765Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个未排序的整数数组，找出其中没有出现的最小的正整数。</p><p><strong>示例1：</strong></p><blockquote><p>输入：[1,2,0]</p><p>输出：3</p></blockquote><p><strong>示例2：</strong></p><blockquote><p>输入：[3,4,-1,1]</p><p>输出：2</p></blockquote><p><strong>示例3：</strong></p><blockquote><p>输入：[7,8,9,11,12]</p><p>输出：1</p></blockquote><p>说明：</p><p>你的算法的时间复杂度应为 O(n)，并且只能使用常数级别的空间。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>假设给定数组的长度是 <code>n</code> ，可分为两种情况进行讨论。</p><ol><li>如果数组是从 <code>1</code>开始连续的正整数序列，那么数组的最大值就是n，第一个未出现的正整数就是 <code>n+1</code> ；</li><li>如果数组并非从 <code>1</code> 开始连续的正整数序列，第一个未出现的正整数必然大于0，且小于等于 <code>n</code> 。</li></ol><p>针对第二种情况，我们借助桶排序（bucket sort）的思路来对数组进行调整，使其中的部分元素满足第一种情况。</p><blockquote><p>桶排序基本思想</p><p>假设待排序的数组A中共有N个整数，并且已知数组a中数据的范围[0, MAX)。在桶排序时，创建容量为MAX的桶数组R，并将桶数组元素都初始化为0；将容量为MAX的桶数组中的每一个单元都看作一个”桶”。 在排序时，逐个遍历数组A，将数组A的值，作为”桶数组R”的下标。当a中数据被读取时，就将桶的值加1。例如，读取到数组A[3]=5，则将R[5]的值+1。</p></blockquote><p>对数组进行遍历，如果某个元素在 1~n 之间，就将其放到原数组中的i-1位置。再次对数组进行遍历，找出第一个不满足 nums[i] != i+1 的数，i+1就是要找的第一个未出现的正整数。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">firstMissingPositive</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> max = nums.length ;</div><div class="line">    <span class="keyword">if</span>(max == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span> ;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; max ; i++) &#123;</div><div class="line">        <span class="keyword">while</span>(nums[i] &gt; <span class="number">0</span> &amp;&amp; nums[i] &lt;= max &amp;&amp; nums[nums[i]-<span class="number">1</span>] != nums[i]) &#123;</div><div class="line">            <span class="keyword">int</span> temp = nums[i] ;</div><div class="line">            nums[i] = nums[temp - <span class="number">1</span>] ;</div><div class="line">            nums[temp - <span class="number">1</span>] = temp ;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; max ; i++) &#123;</div><div class="line">        <span class="keyword">if</span>(nums[i] != i + <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">return</span> i + <span class="number">1</span> ;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> max + <span class="number">1</span> ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;给定一个未排序的整数数组，找出其中没有出现的最小的正整数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例1：&lt;/strong&gt;&lt;/p&gt;
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="最小正整数" scheme="http://yoursite.com/tags/%E6%9C%80%E5%B0%8F%E6%AD%A3%E6%95%B4%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>N皇后问题</title>
    <link href="http://yoursite.com/2018/06/15/nQueen/"/>
    <id>http://yoursite.com/2018/06/15/nQueen/</id>
    <published>2018-06-15T15:13:50.375Z</published>
    <updated>2018-06-15T15:13:50.375Z</updated>
    
    <content type="html"><![CDATA[<h2 id="算法问题描述"><a href="#算法问题描述" class="headerlink" title="算法问题描述"></a>算法问题描述</h2><blockquote><p>　　八皇后问题是一个以国际象棋为背景的问题：如何能够在8×8的国际象棋棋盘上放置八个皇后，使得任何一个皇后都无法直接吃掉其他的皇后？为了达到此目的，任两个皇后都不能处于同一条横行、纵行或斜线上。八皇后问题可以推广为更一般的n皇后摆放问题：这时棋盘的大小变为n×n，而皇后个数也变成n。当且仅当n = 1或n ≥ 4时问题有解.</p></blockquote><p>　　转换成算法问题可以表述为：</p><ol><li>在一个N*N的棋盘上，一共需要放置N枚棋子</li><li>要求每一行，每一列上只能放置1枚棋子</li><li>要求任意斜线上也只能有1枚棋子</li></ol><hr><h2 id="回溯算法的主要思想"><a href="#回溯算法的主要思想" class="headerlink" title="回溯算法的主要思想"></a>回溯算法的主要思想</h2><blockquote><p>　　回溯法是一种选优搜索法，按选优条件向前搜索，以达到目标。<br>　　但当探索到某一步时，发现原先选择并不优或达不到目标，<br>　　就退回一步重新选择，这种走不通就退回再走的技术为回溯法，<br>　　而满足回溯条件的某个状态的点称为“回溯点”。  </p></blockquote><p>　　主要思想：  </p><ol><li>按照深度优先搜索的策略，从根结点出发深度探索解空间树。当探索到某一结点时，要先判断该结点是否包含问题的解，如果包含，就从该结点出发继续探索下去，如果该结点不包含问题的解，则逐层向其祖先结点回溯。    </li><li>若用回溯法求问题的所有解时，要回溯到根，且根结点的所有可行的子树都要已被搜索遍才结束。    </li><li>而若使用回溯法求任一个解时，只要搜索到问题的一个解就可以结束。</li></ol><hr><h2 id="回溯算法解N皇后算法描述"><a href="#回溯算法解N皇后算法描述" class="headerlink" title="回溯算法解N皇后算法描述"></a>回溯算法解N皇后算法描述</h2><p>　　这里用一个N*N的矩阵来存储棋盘。注意，此处的N应该大于等于4，2皇后问题和3皇后问题均无解。     </p><ol><li>算法开始，清空棋盘。当前行设为第1行，当前列设为第1列。</li><li>判断当前行，当前列的位置是否可以放置皇后，即该位置所在的行、列和斜线上是否已经有其他皇后存在。</li><li>如果符合放置条件，在当前位置放置1个皇后，当前行设为下一行，当前列设为第一列；如果不符合放置条件，当前列设为下一列，重复第2步。</li><li>如果某一行遍历结束后（当前列等于），没有到符合条件的位置放置皇后，那么进行回溯：当前行设为上一行，当前列设为上一行皇后所在位置的下一列，取走该行的皇后。<br><strong>注意，如果回溯到了第1行，算法结束。</strong></li><li>如果最后一行找到了皇后位置，就代表有一个问题的可行解，将其输出。然后，当前列设为下一列，取走这一行的皇后，<strong>继续执行算法</strong>。</li></ol><hr><h2 id="代码描述（Java）"><a href="#代码描述（Java）" class="headerlink" title="代码描述（Java）"></a>代码描述（Java）</h2><p>　　实现该算法时，面临的第一个问题就是如何判断当前位置(x,y)是否可以放置皇后。最容易想到的方法是将棋盘存为一个二维矩阵，然后判断X行和Y列上是否已有皇后存在，再判断同一斜线上是否存在其他皇后。用该方法可以实现，代码也不复杂，但效率比较低下。N皇后问题中，需要多次调用这个方法，因此，在设计算法的过程中，要尽可能的对其进行优化。<br>　　在这里介绍另外一种方法:把棋盘存储为一个N维数组a[N]，数组中第i个元素的值代表第i行的皇后位置，这样便可以把问题的空间规模压缩为一维O(N)，在判断是否冲突时也很简单，首先每行只有一个皇后，且在数组中只占据一个元素的位置，行冲突就不存在了，其次是列冲突，判断一下是否有a[i]与当前要放置皇后的列j相等即可。通过观察可以发现所有在斜线上冲突的皇后的位置都有规律，即它们所在的行列互减的绝对值相等，即| row – i | = | col – a[i] | 。这样当前位置是否可以放置皇后的问题已经解决。</p><p>　　接下来，将算法分成若干个过程，一步步进行代码实现。</p><h3 id="对棋盘进行初始化"><a href="#对棋盘进行初始化" class="headerlink" title="对棋盘进行初始化"></a>对棋盘进行初始化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> a[])</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; a.length ; i++) &#123;</div><div class="line">        a[i] = INITIAL ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>　　对一维数组进行遍历，将所有位置都置为同一个初始值。</p><hr><h3 id="判断当前位是否可以放置皇后"><a href="#判断当前位是否可以放置皇后" class="headerlink" title="判断当前位是否可以放置皇后"></a>判断当前位是否可以放置皇后</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">valid</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> row,<span class="keyword">int</span> col)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; a.length ; i++) &#123;</div><div class="line">        <span class="comment">//列是否相等，行列差是否相等</span></div><div class="line">        <span class="keyword">if</span> (col == a[i] || Math.abs(row - i) == Math.abs(col - a[i])) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span> ;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span> ;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>　　只需要判断列冲突和斜线冲突的情况，注意斜线判断的时候是对绝对值的比较。    </p><hr><h3 id="存储一个可行解"><a href="#存储一个可行解" class="headerlink" title="存储一个可行解"></a>存储一个可行解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printqueen</span><span class="params">(<span class="keyword">int</span> a[])</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i:a) &#123;</div><div class="line">        System.out.print(i+<span class="number">1</span>+<span class="string">" "</span>);</div><div class="line">    &#125;</div><div class="line">    System.out.println();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>　　简单的数组打印，不需要多说。加1是为了个人习惯，阅读比较方便。</p><hr><h3 id="寻找可行解的过程"><a href="#寻找可行解的过程" class="headerlink" title="寻找可行解的过程"></a>寻找可行解的过程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">queen</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(i &lt; <span class="number">4</span> || i &gt; <span class="number">64</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span> ;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> a[] = <span class="keyword">new</span> <span class="keyword">int</span>[i] ;</div><div class="line">    init(a) ;       <span class="comment">//初始化</span></div><div class="line">    <span class="keyword">int</span> x = <span class="number">0</span> ;     <span class="comment">//行</span></div><div class="line">    <span class="keyword">int</span> y = <span class="number">0</span> ;     <span class="comment">//列</span></div><div class="line">    <span class="keyword">while</span>(x &lt; i) &#123;</div><div class="line">        <span class="comment">//遍历该行所有列，找出皇后的位置</span></div><div class="line">        <span class="keyword">while</span>(y &lt; i) &#123;</div><div class="line">            <span class="keyword">if</span>(valid(a,x,y)) &#123;</div><div class="line">                a[x] = y ;</div><div class="line">                y = <span class="number">0</span> ;</div><div class="line">                <span class="keyword">break</span> ;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                y++ ;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//如果该行未找到皇后位置</span></div><div class="line">        <span class="keyword">if</span>(a[x] == INITIAL) &#123;</div><div class="line">            <span class="comment">//如果已经回溯到了第一行，结束算法</span></div><div class="line">            <span class="keyword">if</span>(x == <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">break</span> ;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                x-- ;</div><div class="line">                y = a[x] + <span class="number">1</span> ;</div><div class="line">                a[x] = INITIAL ;</div><div class="line">                <span class="keyword">continue</span> ;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//如果最后一行找到了皇后，代表一个解</span></div><div class="line">        <span class="keyword">if</span>(x == i - <span class="number">1</span>) &#123;</div><div class="line">            <span class="comment">//输出解</span></div><div class="line">            printqueen(a);</div><div class="line">            cout++ ;</div><div class="line">            y = a[x] + <span class="number">1</span> ;</div><div class="line">            a[x] = INITIAL ;</div><div class="line">            <span class="keyword">continue</span> ;</div><div class="line">        &#125;</div><div class="line">        x++ ;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> cout ;       <span class="comment">//返回可行解个数</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>　　入口参数i代表求解皇后问题，应该不小3。返回值是问题的可行解个数。<br>　　首先，对数组进行初始化，定义两个变量X和Y，分别代表行和列。第1个while是对行的遍历，第2个while是寻找当前行皇后的位置。如果当前行没找到，进行回溯，如果当前行是最后一行，输出一个解。当回溯到第一行时，算法结束，返回可行解个数。</p><hr><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.lang.Math ;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NQueen</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INITIAL = -<span class="number">10000</span> ;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> cout = <span class="number">0</span> ;</div><div class="line">    <span class="comment">//对棋盘进行初始化</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> a[])</span></span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; a.length ; i++) &#123;</div><div class="line">            a[i] = INITIAL ;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//判断当前位置是否可以放置一个皇后</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">valid</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> row,<span class="keyword">int</span> col)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; a.length ; i++) &#123;</div><div class="line">            <span class="comment">//列是否相等，行列差是否相等</span></div><div class="line">            <span class="keyword">if</span> (col == a[i] || Math.abs(row - i) == Math.abs(col - a[i])) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span> ;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span> ;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//存储一个可行解</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printqueen</span><span class="params">(<span class="keyword">int</span> a[])</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i:a) &#123;</div><div class="line">            System.out.print(i+<span class="number">1</span>+<span class="string">" "</span>);</div><div class="line">        &#125;</div><div class="line">        System.out.println();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">queen</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(i &lt; <span class="number">4</span> || i &gt; <span class="number">64</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span> ;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> a[] = <span class="keyword">new</span> <span class="keyword">int</span>[i] ;</div><div class="line">        init(a) ;       <span class="comment">//初始化</span></div><div class="line">        <span class="keyword">int</span> x = <span class="number">0</span> ;     <span class="comment">//行</span></div><div class="line">        <span class="keyword">int</span> y = <span class="number">0</span> ;     <span class="comment">//列</span></div><div class="line">        <span class="keyword">while</span>(x &lt; i) &#123;</div><div class="line">            <span class="comment">//遍历该行所有列，找出皇后的位置</span></div><div class="line">            <span class="keyword">while</span>(y &lt; i) &#123;</div><div class="line">                <span class="keyword">if</span>(valid(a,x,y)) &#123;</div><div class="line">                    a[x] = y ;</div><div class="line">                    y = <span class="number">0</span> ;</div><div class="line">                    <span class="keyword">break</span> ;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span>&#123;</div><div class="line">                    y++ ;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//如果该行未找到皇后位置</span></div><div class="line">            <span class="keyword">if</span>(a[x] == INITIAL) &#123;</div><div class="line">                <span class="comment">//如果已经回溯到了第一行，结束算法</span></div><div class="line">                <span class="keyword">if</span>(x == <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">break</span> ;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    x-- ;</div><div class="line">                    y = a[x] + <span class="number">1</span> ;</div><div class="line">                    a[x] = INITIAL ;</div><div class="line">                    <span class="keyword">continue</span> ;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//如果最后一行找到了皇后，代表一个解</span></div><div class="line">            <span class="keyword">if</span>(x == i - <span class="number">1</span>) &#123;</div><div class="line">                <span class="comment">//输出解</span></div><div class="line">                printqueen(a);</div><div class="line">                cout++ ;</div><div class="line">                y = a[x] + <span class="number">1</span> ;</div><div class="line">                a[x] = INITIAL ;</div><div class="line">                <span class="keyword">continue</span> ;</div><div class="line">            &#125;</div><div class="line">            x++ ;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> cout ;       <span class="comment">//返回可行解个数</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">        <span class="keyword">long</span> startTime=System.currentTimeMillis();   <span class="comment">//获取开始时间</span></div><div class="line">        System.out.println(queen(<span class="number">8</span>)+<span class="string">"个解"</span>);</div><div class="line">        <span class="keyword">long</span> endTime=System.currentTimeMillis(); <span class="comment">//获取结束时间</span></div><div class="line">        System.out.println(<span class="string">"程序运行时间： "</span>+(endTime-startTime)+<span class="string">"ms"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>　　输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line">1 5 8 6 3 7 2 4 </div><div class="line">1 6 8 3 7 4 2 5 </div><div class="line">1 7 4 6 8 2 5 3 </div><div class="line">1 7 5 8 2 4 6 3 </div><div class="line">2 4 6 8 3 1 7 5 </div><div class="line">2 5 7 1 3 8 6 4 </div><div class="line">2 5 7 4 1 8 6 3 </div><div class="line">2 6 1 7 4 8 3 5 </div><div class="line">2 6 8 3 1 4 7 5 </div><div class="line">2 7 3 6 8 5 1 4 </div><div class="line">2 7 5 8 1 4 6 3 </div><div class="line">2 8 6 1 3 5 7 4 </div><div class="line">3 1 7 5 8 2 4 6 </div><div class="line">3 5 2 8 1 7 4 6 </div><div class="line">3 5 2 8 6 4 7 1 </div><div class="line">3 5 7 1 4 2 8 6 </div><div class="line">3 5 8 4 1 7 2 6 </div><div class="line">3 6 2 5 8 1 7 4 </div><div class="line">3 6 2 7 1 4 8 5 </div><div class="line">3 6 2 7 5 1 8 4 </div><div class="line">3 6 4 1 8 5 7 2 </div><div class="line">3 6 4 2 8 5 7 1 </div><div class="line">3 6 8 1 4 7 5 2 </div><div class="line">3 6 8 1 5 7 2 4 </div><div class="line">3 6 8 2 4 1 7 5 </div><div class="line">3 7 2 8 5 1 4 6 </div><div class="line">3 7 2 8 6 4 1 5 </div><div class="line">3 8 4 7 1 6 2 5 </div><div class="line">4 1 5 8 2 7 3 6 </div><div class="line">4 1 5 8 6 3 7 2 </div><div class="line">4 2 5 8 6 1 3 7 </div><div class="line">4 2 7 3 6 8 1 5 </div><div class="line">4 2 7 3 6 8 5 1 </div><div class="line">4 2 7 5 1 8 6 3 </div><div class="line">4 2 8 5 7 1 3 6 </div><div class="line">4 2 8 6 1 3 5 7 </div><div class="line">4 6 1 5 2 8 3 7 </div><div class="line">4 6 8 2 7 1 3 5 </div><div class="line">4 6 8 3 1 7 5 2 </div><div class="line">4 7 1 8 5 2 6 3 </div><div class="line">4 7 3 8 2 5 1 6 </div><div class="line">4 7 5 2 6 1 3 8 </div><div class="line">4 7 5 3 1 6 8 2 </div><div class="line">4 8 1 3 6 2 7 5 </div><div class="line">4 8 1 5 7 2 6 3 </div><div class="line">4 8 5 3 1 7 2 6 </div><div class="line">5 1 4 6 8 2 7 3 </div><div class="line">5 1 8 4 2 7 3 6 </div><div class="line">5 1 8 6 3 7 2 4 </div><div class="line">5 2 4 6 8 3 1 7 </div><div class="line">5 2 4 7 3 8 6 1 </div><div class="line">5 2 6 1 7 4 8 3 </div><div class="line">5 2 8 1 4 7 3 6 </div><div class="line">5 3 1 6 8 2 4 7 </div><div class="line">5 3 1 7 2 8 6 4 </div><div class="line">5 3 8 4 7 1 6 2 </div><div class="line">5 7 1 3 8 6 4 2 </div><div class="line">5 7 1 4 2 8 6 3 </div><div class="line">5 7 2 4 8 1 3 6 </div><div class="line">5 7 2 6 3 1 4 8 </div><div class="line">5 7 2 6 3 1 8 4 </div><div class="line">5 7 4 1 3 8 6 2 </div><div class="line">5 8 4 1 3 6 2 7 </div><div class="line">5 8 4 1 7 2 6 3 </div><div class="line">6 1 5 2 8 3 7 4 </div><div class="line">6 2 7 1 3 5 8 4 </div><div class="line">6 2 7 1 4 8 5 3 </div><div class="line">6 3 1 7 5 8 2 4 </div><div class="line">6 3 1 8 4 2 7 5 </div><div class="line">6 3 1 8 5 2 4 7 </div><div class="line">6 3 5 7 1 4 2 8 </div><div class="line">6 3 5 8 1 4 2 7 </div><div class="line">6 3 7 2 4 8 1 5 </div><div class="line">6 3 7 2 8 5 1 4 </div><div class="line">6 3 7 4 1 8 2 5 </div><div class="line">6 4 1 5 8 2 7 3 </div><div class="line">6 4 2 8 5 7 1 3 </div><div class="line">6 4 7 1 3 5 2 8 </div><div class="line">6 4 7 1 8 2 5 3 </div><div class="line">6 8 2 4 1 7 5 3 </div><div class="line">7 1 3 8 6 4 2 5 </div><div class="line">7 2 4 1 8 5 3 6 </div><div class="line">7 2 6 3 1 4 8 5 </div><div class="line">7 3 1 6 8 5 2 4 </div><div class="line">7 3 8 2 5 1 6 4 </div><div class="line">7 4 2 5 8 1 3 6 </div><div class="line">7 4 2 8 6 1 3 5 </div><div class="line">7 5 3 1 6 8 2 4 </div><div class="line">8 2 4 1 7 5 3 6 </div><div class="line">8 2 5 3 1 7 4 6 </div><div class="line">8 3 1 6 2 5 7 4 </div><div class="line">8 4 1 3 6 2 7 5 </div><div class="line">92个解</div><div class="line">程序运行时间： 11ms</div></pre></td></tr></table></figure></p><hr><h2 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h2><p>　　回溯算法通常可以用递归来实现，其主要代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;  </div><div class="line">    <span class="keyword">if</span>(x == n)&#123;      <span class="comment">//如果找到一个解，进行输出</span></div><div class="line">        cout++ ;  </div><div class="line">        printqueen() ;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">else</span>  </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span> ;y &lt; n;y++)&#123;      <span class="comment">//探测当前行的每一列 </span></div><div class="line">            a[x] = y ;</div><div class="line">            <span class="keyword">if</span>(valid(a,x,y)) &#123;</div><div class="line">                backtrack(x+<span class="number">1</span>) ;        <span class="comment">//递归调用，循环求解 </span></div><div class="line">            &#125; </div><div class="line">        &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>　　该方法由于在探测第x行后，如果找到一个可以放置皇后的位置y后，则会递归探测下一行，结束后则会继续探测x行y+1列，故可以找到所有的N皇后的解。<br>　　但是一般来说递归的效率比较差，因此此处仅做简单介绍，有兴趣的朋友可自行实现。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;算法问题描述&quot;&gt;&lt;a href=&quot;#算法问题描述&quot; class=&quot;headerlink&quot; title=&quot;算法问题描述&quot;&gt;&lt;/a&gt;算法问题描述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;　　八皇后问题是一个以国际象棋为背景的问题：如何能够在8×8的国际象棋棋盘上放置八
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="回溯" scheme="http://yoursite.com/tags/%E5%9B%9E%E6%BA%AF/"/>
    
      <category term="N皇后" scheme="http://yoursite.com/tags/N%E7%9A%87%E5%90%8E/"/>
    
  </entry>
  
  <entry>
    <title>回溯法应用举例——子数组积/和问题</title>
    <link href="http://yoursite.com/2018/06/15/%E5%9B%9E%E6%BA%AF%E6%B3%95%E5%BA%94%E7%94%A8%E4%B8%BE%E4%BE%8B%E2%80%94%E2%80%94%E5%AD%90%E6%95%B0%E7%BB%84%E7%A7%AF%E5%92%8C%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/06/15/回溯法应用举例——子数组积和问题/</id>
    <published>2018-06-15T15:12:54.025Z</published>
    <updated>2018-06-15T15:12:54.025Z</updated>
    
    <content type="html"><![CDATA[<h2 id="leetcode-713"><a href="#leetcode-713" class="headerlink" title="leetcode 713"></a>leetcode 713</h2><p>　　在 <a href="https://leetcode-cn.com/problems/subarray-product-less-than-k/description/" target="_blank" rel="external">leetcode</a>上面有这样一道题：</p><p>　　给定一个正整数数组 <code>nums</code>。</p><p>　　找出该数组内乘积小于 <code>k</code> 的连续的子数组的个数。</p><p>　　示例1：</p><blockquote><p>输入: nums = [10,5,2,6], k = 100<br>输出: 8<br>解释: 8个乘积小于100的子数组分别为: [10], [5], [2], [6], [10,5], [5,2], [2,6], [5,2,6]。<br>需要注意的是 [10,5,2] 并不是乘积小于100的子数组。  </p></blockquote><p>　　该问题的解题思路就是通过对数组的遍历，找出其中连续积小于 <code>k</code> 的区间，每增加一个元素，就说明有该区间的大小的子数组满足条件，若积大于或等于k，则将区间左边的元素去掉，继续执行。其代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numSubarrayProductLessThanK</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> cout = <span class="number">0</span> ;</div><div class="line">    <span class="keyword">int</span> left = <span class="number">0</span> ;</div><div class="line">    <span class="keyword">int</span> total = <span class="number">1</span> ;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> right = <span class="number">0</span> ; right &lt; nums.length ; right++) &#123;</div><div class="line">        total *= nums[right] ;</div><div class="line">        <span class="keyword">while</span>(total &gt;= k &amp;&amp; left &lt;= right ) </div><div class="line">            total /= nums[left++] ;</div><div class="line">        cout += right - left + <span class="number">1</span> ; </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> cout ;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>　　但是这道题不是今天的主角，做完这道题之后，突然想到，如果子数组是非连续的应该如何求解呢？</p><h2 id="子数组积问题"><a href="#子数组积问题" class="headerlink" title="子数组积问题"></a>子数组积问题</h2><p>　　现在将问题修改为：</p><p>　　给定一个正整数数组 <code>nums</code>。</p><p>　　找出该数组内乘积小于 <code>k</code> 的<strong>任意</strong>子数组的个数。</p><p>　　解决该问题的主要思路还是和之前的N皇后问题一样，使用回溯算法。</p><hr><ol><li><p>首先定义出问题的单个解。我们可以使用一个一维数组 <code>status[]</code> 来表示单个的解，数组长度和 <code>nums</code> 相同， <code>status[i]</code> 即对应 <code>nums[i]</code> 的状态。在一个解中，单个元素有两种状态，及在解中或者不在解中，因此可以用1和0来表示。</p></li><li><p>然后我们可以定义问题的解空间。如图所示，用状态空间树来表示解空间就是一棵二叉树，在初始状态下，面临第一次选择，即 <code>statu[0]</code>应该取1还是0，依次类推，从根节点到叶子节点的一条路径就表示问题的一个解。</p><p><img src="https://raw.githubusercontent.com/ShawHee/MyPhotos/master/%E5%9B%9E%E6%BA%AF-%E7%8A%B6%E6%80%81%E7%A9%BA%E9%97%B4%E6%A0%91.png" alt="状态空间树"></p></li><li><p>寻找可行解的过程就是遍历树的过程。在此过程中，我们需要利用一个限界函数，用来剪除掉那些不可能产生可行解的分支。根据题意，我们可以将限界函数定义为：已有元素的积小于 <code>k</code>（也可进一步限定解，剩余的元素必须可以生成可行解，即剩余元素和已有元素的积要大于等于 <code>k</code> ）。</p></li><li><p>按照深度优先的策略遍历状态空间树，就是回溯的思想，而采用宽度优先的策略则是另一种算法“分支-限界”。</p></li></ol><hr><p>对问题进行分析之后，进行代码实现，在N皇后问题中，使用的是迭代，而此次使用递归来对问题进行求解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">backtrack</span><span class="params">(<span class="keyword">int</span>[] nums , <span class="keyword">int</span> status[] , <span class="keyword">int</span> x , <span class="keyword">int</span> k )</span> </span>&#123;</div><div class="line">       status[x] = <span class="number">1</span> ;<span class="comment">//生成左子树</span></div><div class="line">       <span class="keyword">int</span> total = <span class="number">1</span> ;</div><div class="line">       <span class="keyword">int</span> cout = <span class="number">0</span> ;</div><div class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt;= x ; i++) &#123;</div><div class="line">       <span class="keyword">if</span>(status[i] != <span class="number">0</span>) </div><div class="line">           total *= nums[i] ;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">if</span>(total &lt; k ) &#123;<span class="comment">//是否满足限界函数</span></div><div class="line">           cout++ ;</div><div class="line">           <span class="keyword">if</span>(x &lt; nums.length - <span class="number">1</span>)</div><div class="line">               cout += backtrack(nums , status , x+<span class="number">1</span> , k) ;</div><div class="line">       &#125;       </div><div class="line">       <span class="keyword">if</span>(x &lt; nums.length - <span class="number">1</span>) </div><div class="line">           status[x] = <span class="number">0</span> ;<span class="comment">//生成右子树</span></div><div class="line">           cout += backtrack(nums , status , x+<span class="number">1</span> , k) ;</div><div class="line">       <span class="keyword">return</span> cout ;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>　　<code>nums</code> 是给定的数组， <code>status</code> 用来保存每个元素的状态（0或1）， <code>x</code> 用来记录当前结点， <code>k</code> 是给定的积最大值。函数返回一个 <code>cout</code> ，也就是当前子树的可行解个数。</p><p>　　首先令当前结点状态为1，生成左子树，计算已有元素的积，判断是否小于 <code>k</code> ，如果小于则将 <code>cout</code> 加1，对下一个结点进行递归调用，如果不满足则该分支结束遍历。然后令当前结点状态为0，生成右子树，进行递归调用。最后返回 <code>cout</code> 值。</p><p>下面是数组初始化和首次调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numSubarrayProductLessThanK</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> status[] = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length] ;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; status.length ; i++)</div><div class="line">        status[i] = <span class="number">0</span> ;</div><div class="line">    <span class="keyword">int</span> x = <span class="number">0</span> ;</div><div class="line">    <span class="keyword">return</span> backtrack(nums,status,x,k) ;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="子数组和问题"><a href="#子数组和问题" class="headerlink" title="子数组和问题"></a>子数组和问题</h2><p>　　子数组和问题和上面问题相似，要求是找出数组内和等于 <code>k</code> 的任意子数组个数，只需要修改限界函数就可以得到解。</p><p>　　实现代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">NumSubarrayProductIsK</span><span class="params">(<span class="keyword">int</span> nums[] , <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> status[] = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length] ;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; status.length ; i++) &#123;</div><div class="line">        status[i] = <span class="number">0</span> ;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> x = <span class="number">0</span> ;</div><div class="line">    <span class="keyword">return</span> backttack_2(nums, status, x, k) ;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">backttack_2</span><span class="params">(<span class="keyword">int</span> nums[] , <span class="keyword">int</span> statu[] , <span class="keyword">int</span> x , <span class="keyword">int</span> k )</span> </span>&#123;</div><div class="line">    statu[x] = <span class="number">1</span> ;<span class="comment">//生成左子树</span></div><div class="line">    <span class="keyword">int</span> cout = <span class="number">0</span> ;</div><div class="line">    <span class="keyword">int</span> total = <span class="number">0</span> ;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt;= x ; i++) &#123;</div><div class="line">        total += nums[i]*statu[i] ;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(total == k) &#123;<span class="comment">//判断是否满足限界函数</span></div><div class="line">        cout++ ;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(total &lt; k &amp;&amp; x &lt; nums.length-<span class="number">1</span>) &#123;</div><div class="line">        cout += backttack_2(nums, statu, x+<span class="number">1</span>, k) ;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(x &lt; nums.length - <span class="number">1</span>) &#123;</div><div class="line">        statu[x] = <span class="number">0</span> ;<span class="comment">//生成右子树</span></div><div class="line">        cout += backttack_2(nums, statu, x+<span class="number">1</span>, k) ;</div><div class="line">    &#125;           </div><div class="line">    <span class="keyword">return</span> cout ;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>　　测试代码和输出结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Solution s = <span class="keyword">new</span> Solution() ;</div><div class="line">        <span class="keyword">int</span> nums[] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">5</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">5</span>&#125; ;</div><div class="line">        System.out.println(<span class="string">"有"</span>+s.NumSubarrayProductIsK(nums, <span class="number">10</span>)+<span class="string">"个数组和等于10"</span>);</div><div class="line">        System.out.println(<span class="string">"有"</span>+s.numSubarrayProductLessThanK(nums, <span class="number">10</span>)+<span class="string">"个子数组积小于10"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>有3个数组和等于10</p><p>有4个子数组积小于10</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;leetcode-713&quot;&gt;&lt;a href=&quot;#leetcode-713&quot; class=&quot;headerlink&quot; title=&quot;leetcode 713&quot;&gt;&lt;/a&gt;leetcode 713&lt;/h2&gt;&lt;p&gt;　　在 &lt;a href=&quot;https://leetcode-
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="回溯" scheme="http://yoursite.com/tags/%E5%9B%9E%E6%BA%AF/"/>
    
      <category term="子数组和" scheme="http://yoursite.com/tags/%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/"/>
    
      <category term="子数组积" scheme="http://yoursite.com/tags/%E5%AD%90%E6%95%B0%E7%BB%84%E7%A7%AF/"/>
    
  </entry>
  
</feed>
