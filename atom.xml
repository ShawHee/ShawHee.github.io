<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shaw He&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-15T15:16:00.629Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Shaw He</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>最怕学霸秀恩爱</title>
    <link href="http://yoursite.com/2018/06/15/%E6%9C%80%E6%80%95%E5%AD%A6%E9%9C%B8%E7%A7%80%E6%81%A9%E7%88%B1/"/>
    <id>http://yoursite.com/2018/06/15/最怕学霸秀恩爱/</id>
    <published>2018-06-15T15:16:00.628Z</published>
    <updated>2018-06-15T15:16:00.629Z</updated>
    
    <content type="html"><![CDATA[<p>俗话说，在学校最难受的三件事是：</p><ol><li>看学霸秀成绩</li><li>看情侣秀恩爱</li><li>看土豪炫富</li></ol><p>比这更难受的三件事是：</p><ol><li>看学霸秀恩爱</li><li>看土豪秀成绩</li><li>看情侣炫富</li></ol><p>今天就被一对学霸秀了一脸，在此先记下这个仇了……</p><p><img src="https://raw.githubusercontent.com/ShawHee/MyPhotos/master/2018-6-15_%E7%BE%BD%E8%8C%9C%E5%A7%90%E5%A7%90%E5%92%8C%E5%A7%90%E5%A4%AB1.jpg" alt="yuxi"></p><center><em>PS:这张图是某人自己P的，摄影来自对面的我</em></center><p>没错就是这两个人，两个不折不扣的学霸，分别保研了北大和武大，成绩好，颜值高，气质佳，能力强，极具音乐天赋，刚才还跟我说自小担任文艺委员，小学钢琴考了8级，emmm。</p><p><img src="https://raw.githubusercontent.com/ShawHee/MyPhotos/master/2018-6-15_%E7%BE%BD%E8%8C%9C%E5%A7%90%E5%A7%90%E5%92%8C%E5%A7%90%E5%A4%AB3.jpg" alt="yuxi"></p><p>在大一上党课的时候认识了姐夫，被他“骗”进联席会后又认识了羽茜姐姐，后来才知道他们两的关系，还知道了他们也是在联席会认识的……虽然作为单身狗，经常被他们两秀一脸，但还是很感谢他们这两年来对我的帮助，不光是联席会材料和党课的工作，还有学习和生活，一直以来都把他们当作学习的榜样。教我理清复杂的入党材料，带我做好党课班长，用”专业课90+一点也不难“、”不拿国奖不带我玩“来激励我学习，晚上请我吃饭还因为吃辣把嗓子吃坏了……</p><p>临近毕业，别无所赠，只有祝福了，希望你们学业顺利，幸福美满，一直恩爱下去。（记得以后带我去北大玩）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;俗话说，在学校最难受的三件事是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;看学霸秀成绩&lt;/li&gt;
&lt;li&gt;看情侣秀恩爱&lt;/li&gt;
&lt;li&gt;看土豪炫富&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;比这更难受的三件事是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;看学霸秀恩爱&lt;/li&gt;
&lt;li&gt;看土豪秀成绩&lt;/li&gt;
&lt;l
      
    
    </summary>
    
      <category term="日记" scheme="http://yoursite.com/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="大学" scheme="http://yoursite.com/tags/%E5%A4%A7%E5%AD%A6/"/>
    
      <category term="生活" scheme="http://yoursite.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="记仇" scheme="http://yoursite.com/tags/%E8%AE%B0%E4%BB%87/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 41 缺失的第一个正数</title>
    <link href="http://yoursite.com/2018/06/15/LeetCode%2041%20%E7%BC%BA%E5%A4%B1%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%AD%A3%E6%95%B0/"/>
    <id>http://yoursite.com/2018/06/15/LeetCode 41 缺失的第一个正数/</id>
    <published>2018-06-15T15:14:23.765Z</published>
    <updated>2018-06-15T15:14:23.765Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个未排序的整数数组，找出其中没有出现的最小的正整数。</p><p><strong>示例1：</strong></p><blockquote><p>输入：[1,2,0]</p><p>输出：3</p></blockquote><p><strong>示例2：</strong></p><blockquote><p>输入：[3,4,-1,1]</p><p>输出：2</p></blockquote><p><strong>示例3：</strong></p><blockquote><p>输入：[7,8,9,11,12]</p><p>输出：1</p></blockquote><p>说明：</p><p>你的算法的时间复杂度应为 O(n)，并且只能使用常数级别的空间。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>假设给定数组的长度是 <code>n</code> ，可分为两种情况进行讨论。</p><ol><li>如果数组是从 <code>1</code>开始连续的正整数序列，那么数组的最大值就是n，第一个未出现的正整数就是 <code>n+1</code> ；</li><li>如果数组并非从 <code>1</code> 开始连续的正整数序列，第一个未出现的正整数必然大于0，且小于等于 <code>n</code> 。</li></ol><p>针对第二种情况，我们借助桶排序（bucket sort）的思路来对数组进行调整，使其中的部分元素满足第一种情况。</p><blockquote><p>桶排序基本思想</p><p>假设待排序的数组A中共有N个整数，并且已知数组a中数据的范围[0, MAX)。在桶排序时，创建容量为MAX的桶数组R，并将桶数组元素都初始化为0；将容量为MAX的桶数组中的每一个单元都看作一个”桶”。 在排序时，逐个遍历数组A，将数组A的值，作为”桶数组R”的下标。当a中数据被读取时，就将桶的值加1。例如，读取到数组A[3]=5，则将R[5]的值+1。</p></blockquote><p>对数组进行遍历，如果某个元素在 1~n 之间，就将其放到原数组中的i-1位置。再次对数组进行遍历，找出第一个不满足 nums[i] != i+1 的数，i+1就是要找的第一个未出现的正整数。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">firstMissingPositive</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> max = nums.length ;</div><div class="line">    <span class="keyword">if</span>(max == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span> ;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; max ; i++) &#123;</div><div class="line">        <span class="keyword">while</span>(nums[i] &gt; <span class="number">0</span> &amp;&amp; nums[i] &lt;= max &amp;&amp; nums[nums[i]-<span class="number">1</span>] != nums[i]) &#123;</div><div class="line">            <span class="keyword">int</span> temp = nums[i] ;</div><div class="line">            nums[i] = nums[temp - <span class="number">1</span>] ;</div><div class="line">            nums[temp - <span class="number">1</span>] = temp ;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; max ; i++) &#123;</div><div class="line">        <span class="keyword">if</span>(nums[i] != i + <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">return</span> i + <span class="number">1</span> ;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> max + <span class="number">1</span> ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;给定一个未排序的整数数组，找出其中没有出现的最小的正整数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例1：&lt;/strong&gt;&lt;/p&gt;
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="最小正整数" scheme="http://yoursite.com/tags/%E6%9C%80%E5%B0%8F%E6%AD%A3%E6%95%B4%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>N皇后问题</title>
    <link href="http://yoursite.com/2018/06/15/nQueen/"/>
    <id>http://yoursite.com/2018/06/15/nQueen/</id>
    <published>2018-06-15T15:13:50.375Z</published>
    <updated>2018-06-15T15:13:50.375Z</updated>
    
    <content type="html"><![CDATA[<h2 id="算法问题描述"><a href="#算法问题描述" class="headerlink" title="算法问题描述"></a>算法问题描述</h2><blockquote><p>　　八皇后问题是一个以国际象棋为背景的问题：如何能够在8×8的国际象棋棋盘上放置八个皇后，使得任何一个皇后都无法直接吃掉其他的皇后？为了达到此目的，任两个皇后都不能处于同一条横行、纵行或斜线上。八皇后问题可以推广为更一般的n皇后摆放问题：这时棋盘的大小变为n×n，而皇后个数也变成n。当且仅当n = 1或n ≥ 4时问题有解.</p></blockquote><p>　　转换成算法问题可以表述为：</p><ol><li>在一个N*N的棋盘上，一共需要放置N枚棋子</li><li>要求每一行，每一列上只能放置1枚棋子</li><li>要求任意斜线上也只能有1枚棋子</li></ol><hr><h2 id="回溯算法的主要思想"><a href="#回溯算法的主要思想" class="headerlink" title="回溯算法的主要思想"></a>回溯算法的主要思想</h2><blockquote><p>　　回溯法是一种选优搜索法，按选优条件向前搜索，以达到目标。<br>　　但当探索到某一步时，发现原先选择并不优或达不到目标，<br>　　就退回一步重新选择，这种走不通就退回再走的技术为回溯法，<br>　　而满足回溯条件的某个状态的点称为“回溯点”。  </p></blockquote><p>　　主要思想：  </p><ol><li>按照深度优先搜索的策略，从根结点出发深度探索解空间树。当探索到某一结点时，要先判断该结点是否包含问题的解，如果包含，就从该结点出发继续探索下去，如果该结点不包含问题的解，则逐层向其祖先结点回溯。    </li><li>若用回溯法求问题的所有解时，要回溯到根，且根结点的所有可行的子树都要已被搜索遍才结束。    </li><li>而若使用回溯法求任一个解时，只要搜索到问题的一个解就可以结束。</li></ol><hr><h2 id="回溯算法解N皇后算法描述"><a href="#回溯算法解N皇后算法描述" class="headerlink" title="回溯算法解N皇后算法描述"></a>回溯算法解N皇后算法描述</h2><p>　　这里用一个N*N的矩阵来存储棋盘。注意，此处的N应该大于等于4，2皇后问题和3皇后问题均无解。     </p><ol><li>算法开始，清空棋盘。当前行设为第1行，当前列设为第1列。</li><li>判断当前行，当前列的位置是否可以放置皇后，即该位置所在的行、列和斜线上是否已经有其他皇后存在。</li><li>如果符合放置条件，在当前位置放置1个皇后，当前行设为下一行，当前列设为第一列；如果不符合放置条件，当前列设为下一列，重复第2步。</li><li>如果某一行遍历结束后（当前列等于），没有到符合条件的位置放置皇后，那么进行回溯：当前行设为上一行，当前列设为上一行皇后所在位置的下一列，取走该行的皇后。<br><strong>注意，如果回溯到了第1行，算法结束。</strong></li><li>如果最后一行找到了皇后位置，就代表有一个问题的可行解，将其输出。然后，当前列设为下一列，取走这一行的皇后，<strong>继续执行算法</strong>。</li></ol><hr><h2 id="代码描述（Java）"><a href="#代码描述（Java）" class="headerlink" title="代码描述（Java）"></a>代码描述（Java）</h2><p>　　实现该算法时，面临的第一个问题就是如何判断当前位置(x,y)是否可以放置皇后。最容易想到的方法是将棋盘存为一个二维矩阵，然后判断X行和Y列上是否已有皇后存在，再判断同一斜线上是否存在其他皇后。用该方法可以实现，代码也不复杂，但效率比较低下。N皇后问题中，需要多次调用这个方法，因此，在设计算法的过程中，要尽可能的对其进行优化。<br>　　在这里介绍另外一种方法:把棋盘存储为一个N维数组a[N]，数组中第i个元素的值代表第i行的皇后位置，这样便可以把问题的空间规模压缩为一维O(N)，在判断是否冲突时也很简单，首先每行只有一个皇后，且在数组中只占据一个元素的位置，行冲突就不存在了，其次是列冲突，判断一下是否有a[i]与当前要放置皇后的列j相等即可。通过观察可以发现所有在斜线上冲突的皇后的位置都有规律，即它们所在的行列互减的绝对值相等，即| row – i | = | col – a[i] | 。这样当前位置是否可以放置皇后的问题已经解决。</p><p>　　接下来，将算法分成若干个过程，一步步进行代码实现。</p><h3 id="对棋盘进行初始化"><a href="#对棋盘进行初始化" class="headerlink" title="对棋盘进行初始化"></a>对棋盘进行初始化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> a[])</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; a.length ; i++) &#123;</div><div class="line">        a[i] = INITIAL ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>　　对一维数组进行遍历，将所有位置都置为同一个初始值。</p><hr><h3 id="判断当前位是否可以放置皇后"><a href="#判断当前位是否可以放置皇后" class="headerlink" title="判断当前位是否可以放置皇后"></a>判断当前位是否可以放置皇后</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">valid</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> row,<span class="keyword">int</span> col)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; a.length ; i++) &#123;</div><div class="line">        <span class="comment">//列是否相等，行列差是否相等</span></div><div class="line">        <span class="keyword">if</span> (col == a[i] || Math.abs(row - i) == Math.abs(col - a[i])) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span> ;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span> ;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>　　只需要判断列冲突和斜线冲突的情况，注意斜线判断的时候是对绝对值的比较。    </p><hr><h3 id="存储一个可行解"><a href="#存储一个可行解" class="headerlink" title="存储一个可行解"></a>存储一个可行解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printqueen</span><span class="params">(<span class="keyword">int</span> a[])</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i:a) &#123;</div><div class="line">        System.out.print(i+<span class="number">1</span>+<span class="string">" "</span>);</div><div class="line">    &#125;</div><div class="line">    System.out.println();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>　　简单的数组打印，不需要多说。加1是为了个人习惯，阅读比较方便。</p><hr><h3 id="寻找可行解的过程"><a href="#寻找可行解的过程" class="headerlink" title="寻找可行解的过程"></a>寻找可行解的过程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">queen</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(i &lt; <span class="number">4</span> || i &gt; <span class="number">64</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span> ;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> a[] = <span class="keyword">new</span> <span class="keyword">int</span>[i] ;</div><div class="line">    init(a) ;       <span class="comment">//初始化</span></div><div class="line">    <span class="keyword">int</span> x = <span class="number">0</span> ;     <span class="comment">//行</span></div><div class="line">    <span class="keyword">int</span> y = <span class="number">0</span> ;     <span class="comment">//列</span></div><div class="line">    <span class="keyword">while</span>(x &lt; i) &#123;</div><div class="line">        <span class="comment">//遍历该行所有列，找出皇后的位置</span></div><div class="line">        <span class="keyword">while</span>(y &lt; i) &#123;</div><div class="line">            <span class="keyword">if</span>(valid(a,x,y)) &#123;</div><div class="line">                a[x] = y ;</div><div class="line">                y = <span class="number">0</span> ;</div><div class="line">                <span class="keyword">break</span> ;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                y++ ;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//如果该行未找到皇后位置</span></div><div class="line">        <span class="keyword">if</span>(a[x] == INITIAL) &#123;</div><div class="line">            <span class="comment">//如果已经回溯到了第一行，结束算法</span></div><div class="line">            <span class="keyword">if</span>(x == <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">break</span> ;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                x-- ;</div><div class="line">                y = a[x] + <span class="number">1</span> ;</div><div class="line">                a[x] = INITIAL ;</div><div class="line">                <span class="keyword">continue</span> ;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//如果最后一行找到了皇后，代表一个解</span></div><div class="line">        <span class="keyword">if</span>(x == i - <span class="number">1</span>) &#123;</div><div class="line">            <span class="comment">//输出解</span></div><div class="line">            printqueen(a);</div><div class="line">            cout++ ;</div><div class="line">            y = a[x] + <span class="number">1</span> ;</div><div class="line">            a[x] = INITIAL ;</div><div class="line">            <span class="keyword">continue</span> ;</div><div class="line">        &#125;</div><div class="line">        x++ ;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> cout ;       <span class="comment">//返回可行解个数</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>　　入口参数i代表求解皇后问题，应该不小3。返回值是问题的可行解个数。<br>　　首先，对数组进行初始化，定义两个变量X和Y，分别代表行和列。第1个while是对行的遍历，第2个while是寻找当前行皇后的位置。如果当前行没找到，进行回溯，如果当前行是最后一行，输出一个解。当回溯到第一行时，算法结束，返回可行解个数。</p><hr><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.lang.Math ;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NQueen</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INITIAL = -<span class="number">10000</span> ;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> cout = <span class="number">0</span> ;</div><div class="line">    <span class="comment">//对棋盘进行初始化</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> a[])</span></span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; a.length ; i++) &#123;</div><div class="line">            a[i] = INITIAL ;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//判断当前位置是否可以放置一个皇后</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">valid</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> row,<span class="keyword">int</span> col)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; a.length ; i++) &#123;</div><div class="line">            <span class="comment">//列是否相等，行列差是否相等</span></div><div class="line">            <span class="keyword">if</span> (col == a[i] || Math.abs(row - i) == Math.abs(col - a[i])) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span> ;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span> ;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//存储一个可行解</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printqueen</span><span class="params">(<span class="keyword">int</span> a[])</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i:a) &#123;</div><div class="line">            System.out.print(i+<span class="number">1</span>+<span class="string">" "</span>);</div><div class="line">        &#125;</div><div class="line">        System.out.println();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">queen</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(i &lt; <span class="number">4</span> || i &gt; <span class="number">64</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span> ;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> a[] = <span class="keyword">new</span> <span class="keyword">int</span>[i] ;</div><div class="line">        init(a) ;       <span class="comment">//初始化</span></div><div class="line">        <span class="keyword">int</span> x = <span class="number">0</span> ;     <span class="comment">//行</span></div><div class="line">        <span class="keyword">int</span> y = <span class="number">0</span> ;     <span class="comment">//列</span></div><div class="line">        <span class="keyword">while</span>(x &lt; i) &#123;</div><div class="line">            <span class="comment">//遍历该行所有列，找出皇后的位置</span></div><div class="line">            <span class="keyword">while</span>(y &lt; i) &#123;</div><div class="line">                <span class="keyword">if</span>(valid(a,x,y)) &#123;</div><div class="line">                    a[x] = y ;</div><div class="line">                    y = <span class="number">0</span> ;</div><div class="line">                    <span class="keyword">break</span> ;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span>&#123;</div><div class="line">                    y++ ;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//如果该行未找到皇后位置</span></div><div class="line">            <span class="keyword">if</span>(a[x] == INITIAL) &#123;</div><div class="line">                <span class="comment">//如果已经回溯到了第一行，结束算法</span></div><div class="line">                <span class="keyword">if</span>(x == <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">break</span> ;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    x-- ;</div><div class="line">                    y = a[x] + <span class="number">1</span> ;</div><div class="line">                    a[x] = INITIAL ;</div><div class="line">                    <span class="keyword">continue</span> ;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//如果最后一行找到了皇后，代表一个解</span></div><div class="line">            <span class="keyword">if</span>(x == i - <span class="number">1</span>) &#123;</div><div class="line">                <span class="comment">//输出解</span></div><div class="line">                printqueen(a);</div><div class="line">                cout++ ;</div><div class="line">                y = a[x] + <span class="number">1</span> ;</div><div class="line">                a[x] = INITIAL ;</div><div class="line">                <span class="keyword">continue</span> ;</div><div class="line">            &#125;</div><div class="line">            x++ ;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> cout ;       <span class="comment">//返回可行解个数</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">        <span class="keyword">long</span> startTime=System.currentTimeMillis();   <span class="comment">//获取开始时间</span></div><div class="line">        System.out.println(queen(<span class="number">8</span>)+<span class="string">"个解"</span>);</div><div class="line">        <span class="keyword">long</span> endTime=System.currentTimeMillis(); <span class="comment">//获取结束时间</span></div><div class="line">        System.out.println(<span class="string">"程序运行时间： "</span>+(endTime-startTime)+<span class="string">"ms"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>　　输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line">1 5 8 6 3 7 2 4 </div><div class="line">1 6 8 3 7 4 2 5 </div><div class="line">1 7 4 6 8 2 5 3 </div><div class="line">1 7 5 8 2 4 6 3 </div><div class="line">2 4 6 8 3 1 7 5 </div><div class="line">2 5 7 1 3 8 6 4 </div><div class="line">2 5 7 4 1 8 6 3 </div><div class="line">2 6 1 7 4 8 3 5 </div><div class="line">2 6 8 3 1 4 7 5 </div><div class="line">2 7 3 6 8 5 1 4 </div><div class="line">2 7 5 8 1 4 6 3 </div><div class="line">2 8 6 1 3 5 7 4 </div><div class="line">3 1 7 5 8 2 4 6 </div><div class="line">3 5 2 8 1 7 4 6 </div><div class="line">3 5 2 8 6 4 7 1 </div><div class="line">3 5 7 1 4 2 8 6 </div><div class="line">3 5 8 4 1 7 2 6 </div><div class="line">3 6 2 5 8 1 7 4 </div><div class="line">3 6 2 7 1 4 8 5 </div><div class="line">3 6 2 7 5 1 8 4 </div><div class="line">3 6 4 1 8 5 7 2 </div><div class="line">3 6 4 2 8 5 7 1 </div><div class="line">3 6 8 1 4 7 5 2 </div><div class="line">3 6 8 1 5 7 2 4 </div><div class="line">3 6 8 2 4 1 7 5 </div><div class="line">3 7 2 8 5 1 4 6 </div><div class="line">3 7 2 8 6 4 1 5 </div><div class="line">3 8 4 7 1 6 2 5 </div><div class="line">4 1 5 8 2 7 3 6 </div><div class="line">4 1 5 8 6 3 7 2 </div><div class="line">4 2 5 8 6 1 3 7 </div><div class="line">4 2 7 3 6 8 1 5 </div><div class="line">4 2 7 3 6 8 5 1 </div><div class="line">4 2 7 5 1 8 6 3 </div><div class="line">4 2 8 5 7 1 3 6 </div><div class="line">4 2 8 6 1 3 5 7 </div><div class="line">4 6 1 5 2 8 3 7 </div><div class="line">4 6 8 2 7 1 3 5 </div><div class="line">4 6 8 3 1 7 5 2 </div><div class="line">4 7 1 8 5 2 6 3 </div><div class="line">4 7 3 8 2 5 1 6 </div><div class="line">4 7 5 2 6 1 3 8 </div><div class="line">4 7 5 3 1 6 8 2 </div><div class="line">4 8 1 3 6 2 7 5 </div><div class="line">4 8 1 5 7 2 6 3 </div><div class="line">4 8 5 3 1 7 2 6 </div><div class="line">5 1 4 6 8 2 7 3 </div><div class="line">5 1 8 4 2 7 3 6 </div><div class="line">5 1 8 6 3 7 2 4 </div><div class="line">5 2 4 6 8 3 1 7 </div><div class="line">5 2 4 7 3 8 6 1 </div><div class="line">5 2 6 1 7 4 8 3 </div><div class="line">5 2 8 1 4 7 3 6 </div><div class="line">5 3 1 6 8 2 4 7 </div><div class="line">5 3 1 7 2 8 6 4 </div><div class="line">5 3 8 4 7 1 6 2 </div><div class="line">5 7 1 3 8 6 4 2 </div><div class="line">5 7 1 4 2 8 6 3 </div><div class="line">5 7 2 4 8 1 3 6 </div><div class="line">5 7 2 6 3 1 4 8 </div><div class="line">5 7 2 6 3 1 8 4 </div><div class="line">5 7 4 1 3 8 6 2 </div><div class="line">5 8 4 1 3 6 2 7 </div><div class="line">5 8 4 1 7 2 6 3 </div><div class="line">6 1 5 2 8 3 7 4 </div><div class="line">6 2 7 1 3 5 8 4 </div><div class="line">6 2 7 1 4 8 5 3 </div><div class="line">6 3 1 7 5 8 2 4 </div><div class="line">6 3 1 8 4 2 7 5 </div><div class="line">6 3 1 8 5 2 4 7 </div><div class="line">6 3 5 7 1 4 2 8 </div><div class="line">6 3 5 8 1 4 2 7 </div><div class="line">6 3 7 2 4 8 1 5 </div><div class="line">6 3 7 2 8 5 1 4 </div><div class="line">6 3 7 4 1 8 2 5 </div><div class="line">6 4 1 5 8 2 7 3 </div><div class="line">6 4 2 8 5 7 1 3 </div><div class="line">6 4 7 1 3 5 2 8 </div><div class="line">6 4 7 1 8 2 5 3 </div><div class="line">6 8 2 4 1 7 5 3 </div><div class="line">7 1 3 8 6 4 2 5 </div><div class="line">7 2 4 1 8 5 3 6 </div><div class="line">7 2 6 3 1 4 8 5 </div><div class="line">7 3 1 6 8 5 2 4 </div><div class="line">7 3 8 2 5 1 6 4 </div><div class="line">7 4 2 5 8 1 3 6 </div><div class="line">7 4 2 8 6 1 3 5 </div><div class="line">7 5 3 1 6 8 2 4 </div><div class="line">8 2 4 1 7 5 3 6 </div><div class="line">8 2 5 3 1 7 4 6 </div><div class="line">8 3 1 6 2 5 7 4 </div><div class="line">8 4 1 3 6 2 7 5 </div><div class="line">92个解</div><div class="line">程序运行时间： 11ms</div></pre></td></tr></table></figure></p><hr><h2 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h2><p>　　回溯算法通常可以用递归来实现，其主要代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;  </div><div class="line">    <span class="keyword">if</span>(x == n)&#123;      <span class="comment">//如果找到一个解，进行输出</span></div><div class="line">        cout++ ;  </div><div class="line">        printqueen() ;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">else</span>  </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span> ;y &lt; n;y++)&#123;      <span class="comment">//探测当前行的每一列 </span></div><div class="line">            a[x] = y ;</div><div class="line">            <span class="keyword">if</span>(valid(a,x,y)) &#123;</div><div class="line">                backtrack(x+<span class="number">1</span>) ;        <span class="comment">//递归调用，循环求解 </span></div><div class="line">            &#125; </div><div class="line">        &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>　　该方法由于在探测第x行后，如果找到一个可以放置皇后的位置y后，则会递归探测下一行，结束后则会继续探测x行y+1列，故可以找到所有的N皇后的解。<br>　　但是一般来说递归的效率比较差，因此此处仅做简单介绍，有兴趣的朋友可自行实现。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;算法问题描述&quot;&gt;&lt;a href=&quot;#算法问题描述&quot; class=&quot;headerlink&quot; title=&quot;算法问题描述&quot;&gt;&lt;/a&gt;算法问题描述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;　　八皇后问题是一个以国际象棋为背景的问题：如何能够在8×8的国际象棋棋盘上放置八
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="回溯" scheme="http://yoursite.com/tags/%E5%9B%9E%E6%BA%AF/"/>
    
      <category term="N皇后" scheme="http://yoursite.com/tags/N%E7%9A%87%E5%90%8E/"/>
    
  </entry>
  
  <entry>
    <title>Java synchronized详解</title>
    <link href="http://yoursite.com/2018/06/15/synchronized/"/>
    <id>http://yoursite.com/2018/06/15/synchronized/</id>
    <published>2018-06-15T15:13:22.920Z</published>
    <updated>2018-06-15T15:13:22.920Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>synchronized</strong> 是Java语言的关键字，当它用来修饰一个方法或者一个代码块的时候，能够保证在同一时刻最多只有一个线程执行该段代码。</p></blockquote><hr><ol><li>当两个并发线程访问同一个对象 <em>object</em> 中的这个<em>synchronized(this)</em>同步代码块时，一个时间内只能有一个线程得到执行。另一个线程必须等待当前线程执行完这个代码块以后才能执行该代码块。</li><li>然而，当一个线程访问 <em>object</em> 的一个synchronized(this)同步代码块时，另一个线程仍然可以访问该 <em>object</em> 中的非 <em>synchronized(this)</em> 同步代码块。</li><li>尤其关键的是，当一个线程访问 <em>object</em> 的一个 <em>synchronized(this)</em> 同步代码块时，其他线程对 <em>object</em> 中所有其它 <em>synchronized(this)</em> 同步代码块的访问将被阻塞。</li><li>第三个例子同样适用其它同步代码块。也就是说，当一个线程访问 <em>object</em> 的一个 <em>synchronized(this)</em> 同步代码块时，它就获得了这个 <em>object</em> 的对象锁。结果，其它线程对该 <em>object</em> 对象所有同步代码部分的访问都被暂时阻塞。</li><li>以上规则对其它对象锁同样适用.</li></ol><hr><p>##举例说明<br><strong>.当两个并发线程访问同一个对象 <em>object</em> 中的这个synchronized(this)同步代码块时，一个时间内只能有一个线程得到执行。另一个线程必须等待当前线程执行完这个代码块以后才能执行该代码块。</strong></p><hr> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> ths;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread1</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123; </div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</div><div class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123; </div><div class="line">               System.out.println(Thread.currentThread().getName() + <span class="string">" synchronized loop "</span> + i);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">       Thread1 t1 = <span class="keyword">new</span> Thread1();</div><div class="line">       Thread ta = <span class="keyword">new</span> Thread(t1, <span class="string">"A"</span>);</div><div class="line">       Thread tb = <span class="keyword">new</span> Thread(t1, <span class="string">"B"</span>);</div><div class="line">       ta.start();</div><div class="line">       tb.start();</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p> 输出结果：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">A synchronized loop 0  </div><div class="line">A synchronized loop 1  </div><div class="line">A synchronized loop 2  </div><div class="line">A synchronized loop 3  </div><div class="line">A synchronized loop 4  </div><div class="line">B synchronized loop 0  </div><div class="line">B synchronized loop 1  </div><div class="line">B synchronized loop 2  </div><div class="line">B synchronized loop 3  </div><div class="line">B synchronized loop 4</div></pre></td></tr></table></figure></p><p> <strong>2.当一个线程访问<em>object</em>的一个<em>synchronized(this)</em>同步代码块时，另一个线程仍然可以访问该<em>object</em>中的非<em>synchronized(this)</em>同步代码块。</strong><br> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> ths;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread2</span> </span>&#123;  </div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m4t1</span><span class="params">()</span> </span>&#123;  </div><div class="line">          <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;  </div><div class="line">               <span class="keyword">int</span> i = <span class="number">5</span>;  </div><div class="line">               <span class="keyword">while</span>( i-- &gt; <span class="number">0</span>) &#123;  </div><div class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">" : "</span> + i);  </div><div class="line">                    <span class="keyword">try</span> &#123;  </div><div class="line">                         Thread.sleep(<span class="number">500</span>);  </div><div class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;  </div><div class="line">                    &#125;  </div><div class="line">               &#125;  </div><div class="line">          &#125;  </div><div class="line">     &#125;  </div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m4t2</span><span class="params">()</span> </span>&#123;  </div><div class="line">          <span class="keyword">int</span> i = <span class="number">5</span>;  </div><div class="line">          <span class="keyword">while</span>( i-- &gt; <span class="number">0</span>) &#123;  </div><div class="line">               System.out.println(Thread.currentThread().getName() + <span class="string">" : "</span> + i);  </div><div class="line">               <span class="keyword">try</span> &#123;  </div><div class="line">                    Thread.sleep(<span class="number">500</span>);  </div><div class="line">               &#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;  </div><div class="line">               &#125;  </div><div class="line">          &#125;  </div><div class="line">     &#125;  </div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">          <span class="keyword">final</span> Thread2 myt2 = <span class="keyword">new</span> Thread2();  </div><div class="line">          Thread t1 = <span class="keyword">new</span> Thread(  <span class="keyword">new</span> Runnable() &#123;  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  myt2.m4t1();  &#125;  &#125;, <span class="string">"t1"</span>  );  </div><div class="line">          Thread t2 = <span class="keyword">new</span> Thread(  <span class="keyword">new</span> Runnable() &#123;  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; myt2.m4t2();   &#125;  &#125;, <span class="string">"t2"</span>  );  </div><div class="line">          t1.start();  </div><div class="line">          t2.start();  </div><div class="line">     &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p> 输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">t1 : 4  </div><div class="line">t2 : 4  </div><div class="line">t1 : 3  </div><div class="line">t2 : 3  </div><div class="line">t1 : 2  </div><div class="line">t2 : 2  </div><div class="line">t1 : 1  </div><div class="line">t2 : 1  </div><div class="line">t1 : 0  </div><div class="line">t2 : 0</div></pre></td></tr></table></figure></p><p> <strong>3.尤其关键的是，当一个线程访问<em>object</em>的一个<em>synchronized(this)</em>同步代码块时，其他线程对<em>object</em>中所有其它<em>synchronized(this)</em>同步代码块的访问将被阻塞。</strong><br> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//修改Thread2.m4t2()方法：</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m4t2</span><span class="params">()</span> </span>&#123;  </div><div class="line">     <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;  </div><div class="line">          <span class="keyword">int</span> i = <span class="number">5</span>;  </div><div class="line">          <span class="keyword">while</span>( i-- &gt; <span class="number">0</span>) &#123;  </div><div class="line">               System.out.println(Thread.currentThread().getName() + <span class="string">" : "</span> + i);  </div><div class="line">               <span class="keyword">try</span> &#123;  </div><div class="line">                    Thread.sleep(<span class="number">500</span>);  </div><div class="line">               &#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;  </div><div class="line">               &#125;  </div><div class="line">          &#125;  </div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p> 输出结果：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">t1 : 4  </div><div class="line">t1 : 3  </div><div class="line">t1 : 2  </div><div class="line">t1 : 1  </div><div class="line">t1 : 0  </div><div class="line">t2 : 4  </div><div class="line">t2 : 3  </div><div class="line">t2 : 2  </div><div class="line">t2 : 1  </div><div class="line">t2 : 0</div></pre></td></tr></table></figure></p><p><strong>4.第三个例子同样适用其它同步代码块。也就是说，当一个线程访问<em>object</em>的一个<em>synchronized(this)</em>同步代码块时，它就获得了这个<em>object</em>的对象锁。结果，其它线程对该<em>object</em>对象所有同步代码部分的访问都被暂时阻塞。</strong><br> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//修改Thread2.m4t2()方法如下：</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m4t2</span><span class="params">()</span> </span>&#123;  </div><div class="line">     <span class="keyword">int</span> i = <span class="number">5</span>;  </div><div class="line">     <span class="keyword">while</span>( i-- &gt; <span class="number">0</span>) &#123;  </div><div class="line">          System.out.println(Thread.currentThread().getName() + <span class="string">" : "</span> + i);  </div><div class="line">          <span class="keyword">try</span> &#123;  </div><div class="line">               Thread.sleep(<span class="number">500</span>);  </div><div class="line">          &#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;  </div><div class="line">          &#125;  </div><div class="line">     &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">t1 : 4  </div><div class="line">t1 : 3  </div><div class="line">t1 : 2  </div><div class="line">t1 : 1  </div><div class="line">t1 : 0  </div><div class="line">t2 : 4  </div><div class="line">t2 : 3  </div><div class="line">t2 : 2  </div><div class="line">t2 : 1  </div><div class="line">t2 : 0</div></pre></td></tr></table></figure></p><p><strong>5.以上规则对其它对象锁同样适用:</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> ths;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread3</span> </span>&#123; </div><div class="line">     <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123; </div><div class="line">          <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">m4t1</span><span class="params">()</span> </span>&#123; </div><div class="line">               <span class="keyword">int</span> i = <span class="number">5</span>; </div><div class="line">               <span class="keyword">while</span>(i-- &gt; <span class="number">0</span>) &#123; </div><div class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">" : Inner.m4t1()="</span> + i); </div><div class="line">                    <span class="keyword">try</span> &#123; </div><div class="line">                         Thread.sleep(<span class="number">500</span>); </div><div class="line">                    &#125; <span class="keyword">catch</span>(InterruptedException ie) &#123; </div><div class="line">                    &#125; </div><div class="line">               &#125; </div><div class="line">          &#125; </div><div class="line">          <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">m4t2</span><span class="params">()</span> </span>&#123; </div><div class="line">               <span class="keyword">int</span> i = <span class="number">5</span>; </div><div class="line">               <span class="keyword">while</span>(i-- &gt; <span class="number">0</span>) &#123; </div><div class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">" : Inner.m4t2()="</span> + i); </div><div class="line">                    <span class="keyword">try</span> &#123; </div><div class="line">                         Thread.sleep(<span class="number">500</span>); </div><div class="line">                    &#125; <span class="keyword">catch</span>(InterruptedException ie) &#123; </div><div class="line">                    &#125; </div><div class="line">               &#125; </div><div class="line">          &#125; </div><div class="line">     &#125; </div><div class="line">     <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">m4t1</span><span class="params">(Inner inner)</span> </span>&#123; </div><div class="line">          <span class="keyword">synchronized</span>(inner) &#123; <span class="comment">//使用对象锁 </span></div><div class="line">          inner.m4t1(); </div><div class="line">     &#125; </div><div class="line">     <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">m4t2</span><span class="params">(Inner inner)</span> </span>&#123; </div><div class="line">          inner.m4t2(); </div><div class="line">     &#125; </div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </div><div class="line">          <span class="keyword">final</span> Thread3 myt3 = <span class="keyword">new</span> Thread3(); </div><div class="line">          <span class="keyword">final</span> Inner inner = myt3.new Inner(); </div><div class="line">          Thread t1 = <span class="keyword">new</span> Thread( <span class="keyword">new</span> Runnable() &#123;<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; myt3.m4t1(inner);&#125; &#125;, <span class="string">"t1"</span>); </div><div class="line">     Thread t2 = <span class="keyword">new</span> Thread( <span class="keyword">new</span> Runnable() &#123;<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; myt3.m4t2(inner);&#125; &#125;, <span class="string">"t2"</span>); </div><div class="line">     t1.start(); </div><div class="line">     t2.start(); </div><div class="line">  &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p> 输出结果：</p><p> 　　尽管线程t1获得了对Inner的对象锁，但由于线程t2访问的是同一个Inner中的非同步部分。所以两个线程互不干扰。<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">t1 : Inner.m4t1()=<span class="number">4</span>  </div><div class="line">t2 : Inner.m4t2()=<span class="number">4</span>  </div><div class="line">t1 : Inner.m4t1()=<span class="number">3</span>  </div><div class="line">t2 : Inner.m4t2()=<span class="number">3</span>  </div><div class="line">t1 : Inner.m4t1()=<span class="number">2</span>  </div><div class="line">t2 : Inner.m4t2()=<span class="number">2</span>  </div><div class="line">t1 : Inner.m4t1()=<span class="number">1</span>  </div><div class="line">t2 : Inner.m4t2()=<span class="number">1</span>  </div><div class="line">t1 : Inner.m4t1()=<span class="number">0</span>  </div><div class="line">t2 : Inner.m4t2()=<span class="number">0</span></div></pre></td></tr></table></figure></p><p>　　现在在Inner.m4t2()前面加上<em>synchronized</em>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m4t2</span><span class="params">()</span> </span>&#123;  </div><div class="line">     <span class="keyword">int</span> i = <span class="number">5</span>;  </div><div class="line">     <span class="keyword">while</span>(i-- &gt; <span class="number">0</span>) &#123;  </div><div class="line">          System.out.println(Thread.currentThread().getName() + <span class="string">" : Inner.m4t2()="</span> + i);  </div><div class="line">          <span class="keyword">try</span> &#123;  </div><div class="line">               Thread.sleep(<span class="number">500</span>);  </div><div class="line">          &#125; <span class="keyword">catch</span>(InterruptedException ie) &#123;  </div><div class="line">          &#125;  </div><div class="line">     &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>输出结果：</p><p>　　尽管线程t1与t2访问了同一个Inner对象中两个毫不相关的部分,但因为t1先获得了对Inner的对象锁，所以t2对Inner.m4t2()的访问也被阻塞，因为m4t2()是Inner中的一个同步方法。<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">t1 : Inner.m4t1()=4  </div><div class="line">t1 : Inner.m4t1()=3  </div><div class="line">t1 : Inner.m4t1()=2  </div><div class="line">t1 : Inner.m4t1()=1  </div><div class="line">t1 : Inner.m4t1()=0  </div><div class="line">t2 : Inner.m4t2()=4  </div><div class="line">t2 : Inner.m4t2()=3  </div><div class="line">t2 : Inner.m4t2()=2  </div><div class="line">t2 : Inner.m4t2()=1  </div><div class="line">t2 : Inner.m4t2()=0</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;synchronized&lt;/strong&gt; 是Java语言的关键字，当它用来修饰一个方法或者一个代码块的时候，能够保证在同一时刻最多只有一个线程执行该段代码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;当两个并
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="synchronized" scheme="http://yoursite.com/tags/synchronized/"/>
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>回溯法应用举例——子数组积/和问题</title>
    <link href="http://yoursite.com/2018/06/15/%E5%9B%9E%E6%BA%AF%E6%B3%95%E5%BA%94%E7%94%A8%E4%B8%BE%E4%BE%8B%E2%80%94%E2%80%94%E5%AD%90%E6%95%B0%E7%BB%84%E7%A7%AF%E5%92%8C%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/06/15/回溯法应用举例——子数组积和问题/</id>
    <published>2018-06-15T15:12:54.025Z</published>
    <updated>2018-06-15T15:12:54.025Z</updated>
    
    <content type="html"><![CDATA[<h2 id="leetcode-713"><a href="#leetcode-713" class="headerlink" title="leetcode 713"></a>leetcode 713</h2><p>　　在 <a href="https://leetcode-cn.com/problems/subarray-product-less-than-k/description/" target="_blank" rel="external">leetcode</a>上面有这样一道题：</p><p>　　给定一个正整数数组 <code>nums</code>。</p><p>　　找出该数组内乘积小于 <code>k</code> 的连续的子数组的个数。</p><p>　　示例1：</p><blockquote><p>输入: nums = [10,5,2,6], k = 100<br>输出: 8<br>解释: 8个乘积小于100的子数组分别为: [10], [5], [2], [6], [10,5], [5,2], [2,6], [5,2,6]。<br>需要注意的是 [10,5,2] 并不是乘积小于100的子数组。  </p></blockquote><p>　　该问题的解题思路就是通过对数组的遍历，找出其中连续积小于 <code>k</code> 的区间，每增加一个元素，就说明有该区间的大小的子数组满足条件，若积大于或等于k，则将区间左边的元素去掉，继续执行。其代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numSubarrayProductLessThanK</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> cout = <span class="number">0</span> ;</div><div class="line">    <span class="keyword">int</span> left = <span class="number">0</span> ;</div><div class="line">    <span class="keyword">int</span> total = <span class="number">1</span> ;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> right = <span class="number">0</span> ; right &lt; nums.length ; right++) &#123;</div><div class="line">        total *= nums[right] ;</div><div class="line">        <span class="keyword">while</span>(total &gt;= k &amp;&amp; left &lt;= right ) </div><div class="line">            total /= nums[left++] ;</div><div class="line">        cout += right - left + <span class="number">1</span> ; </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> cout ;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>　　但是这道题不是今天的主角，做完这道题之后，突然想到，如果子数组是非连续的应该如何求解呢？</p><h2 id="子数组积问题"><a href="#子数组积问题" class="headerlink" title="子数组积问题"></a>子数组积问题</h2><p>　　现在将问题修改为：</p><p>　　给定一个正整数数组 <code>nums</code>。</p><p>　　找出该数组内乘积小于 <code>k</code> 的<strong>任意</strong>子数组的个数。</p><p>　　解决该问题的主要思路还是和之前的N皇后问题一样，使用回溯算法。</p><hr><ol><li><p>首先定义出问题的单个解。我们可以使用一个一维数组 <code>status[]</code> 来表示单个的解，数组长度和 <code>nums</code> 相同， <code>status[i]</code> 即对应 <code>nums[i]</code> 的状态。在一个解中，单个元素有两种状态，及在解中或者不在解中，因此可以用1和0来表示。</p></li><li><p>然后我们可以定义问题的解空间。如图所示，用状态空间树来表示解空间就是一棵二叉树，在初始状态下，面临第一次选择，即 <code>statu[0]</code>应该取1还是0，依次类推，从根节点到叶子节点的一条路径就表示问题的一个解。</p><p><img src="https://raw.githubusercontent.com/ShawHee/MyPhotos/master/%E5%9B%9E%E6%BA%AF-%E7%8A%B6%E6%80%81%E7%A9%BA%E9%97%B4%E6%A0%91.png" alt="状态空间树"></p></li><li><p>寻找可行解的过程就是遍历树的过程。在此过程中，我们需要利用一个限界函数，用来剪除掉那些不可能产生可行解的分支。根据题意，我们可以将限界函数定义为：已有元素的积小于 <code>k</code>（也可进一步限定解，剩余的元素必须可以生成可行解，即剩余元素和已有元素的积要大于等于 <code>k</code> ）。</p></li><li><p>按照深度优先的策略遍历状态空间树，就是回溯的思想，而采用宽度优先的策略则是另一种算法“分支-限界”。</p></li></ol><hr><p>对问题进行分析之后，进行代码实现，在N皇后问题中，使用的是迭代，而此次使用递归来对问题进行求解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">backtrack</span><span class="params">(<span class="keyword">int</span>[] nums , <span class="keyword">int</span> status[] , <span class="keyword">int</span> x , <span class="keyword">int</span> k )</span> </span>&#123;</div><div class="line">       status[x] = <span class="number">1</span> ;<span class="comment">//生成左子树</span></div><div class="line">       <span class="keyword">int</span> total = <span class="number">1</span> ;</div><div class="line">       <span class="keyword">int</span> cout = <span class="number">0</span> ;</div><div class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt;= x ; i++) &#123;</div><div class="line">       <span class="keyword">if</span>(status[i] != <span class="number">0</span>) </div><div class="line">           total *= nums[i] ;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">if</span>(total &lt; k ) &#123;<span class="comment">//是否满足限界函数</span></div><div class="line">           cout++ ;</div><div class="line">           <span class="keyword">if</span>(x &lt; nums.length - <span class="number">1</span>)</div><div class="line">               cout += backtrack(nums , status , x+<span class="number">1</span> , k) ;</div><div class="line">       &#125;       </div><div class="line">       <span class="keyword">if</span>(x &lt; nums.length - <span class="number">1</span>) </div><div class="line">           status[x] = <span class="number">0</span> ;<span class="comment">//生成右子树</span></div><div class="line">           cout += backtrack(nums , status , x+<span class="number">1</span> , k) ;</div><div class="line">       <span class="keyword">return</span> cout ;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>　　<code>nums</code> 是给定的数组， <code>status</code> 用来保存每个元素的状态（0或1）， <code>x</code> 用来记录当前结点， <code>k</code> 是给定的积最大值。函数返回一个 <code>cout</code> ，也就是当前子树的可行解个数。</p><p>　　首先令当前结点状态为1，生成左子树，计算已有元素的积，判断是否小于 <code>k</code> ，如果小于则将 <code>cout</code> 加1，对下一个结点进行递归调用，如果不满足则该分支结束遍历。然后令当前结点状态为0，生成右子树，进行递归调用。最后返回 <code>cout</code> 值。</p><p>下面是数组初始化和首次调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numSubarrayProductLessThanK</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> status[] = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length] ;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; status.length ; i++)</div><div class="line">        status[i] = <span class="number">0</span> ;</div><div class="line">    <span class="keyword">int</span> x = <span class="number">0</span> ;</div><div class="line">    <span class="keyword">return</span> backtrack(nums,status,x,k) ;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="子数组和问题"><a href="#子数组和问题" class="headerlink" title="子数组和问题"></a>子数组和问题</h2><p>　　子数组和问题和上面问题相似，要求是找出数组内和等于 <code>k</code> 的任意子数组个数，只需要修改限界函数就可以得到解。</p><p>　　实现代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">NumSubarrayProductIsK</span><span class="params">(<span class="keyword">int</span> nums[] , <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> status[] = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length] ;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; status.length ; i++) &#123;</div><div class="line">        status[i] = <span class="number">0</span> ;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> x = <span class="number">0</span> ;</div><div class="line">    <span class="keyword">return</span> backttack_2(nums, status, x, k) ;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">backttack_2</span><span class="params">(<span class="keyword">int</span> nums[] , <span class="keyword">int</span> statu[] , <span class="keyword">int</span> x , <span class="keyword">int</span> k )</span> </span>&#123;</div><div class="line">    statu[x] = <span class="number">1</span> ;<span class="comment">//生成左子树</span></div><div class="line">    <span class="keyword">int</span> cout = <span class="number">0</span> ;</div><div class="line">    <span class="keyword">int</span> total = <span class="number">0</span> ;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt;= x ; i++) &#123;</div><div class="line">        total += nums[i]*statu[i] ;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(total == k) &#123;<span class="comment">//判断是否满足限界函数</span></div><div class="line">        cout++ ;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(total &lt; k &amp;&amp; x &lt; nums.length-<span class="number">1</span>) &#123;</div><div class="line">        cout += backttack_2(nums, statu, x+<span class="number">1</span>, k) ;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(x &lt; nums.length - <span class="number">1</span>) &#123;</div><div class="line">        statu[x] = <span class="number">0</span> ;<span class="comment">//生成右子树</span></div><div class="line">        cout += backttack_2(nums, statu, x+<span class="number">1</span>, k) ;</div><div class="line">    &#125;           </div><div class="line">    <span class="keyword">return</span> cout ;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>　　测试代码和输出结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Solution s = <span class="keyword">new</span> Solution() ;</div><div class="line">        <span class="keyword">int</span> nums[] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">5</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">5</span>&#125; ;</div><div class="line">        System.out.println(<span class="string">"有"</span>+s.NumSubarrayProductIsK(nums, <span class="number">10</span>)+<span class="string">"个数组和等于10"</span>);</div><div class="line">        System.out.println(<span class="string">"有"</span>+s.numSubarrayProductLessThanK(nums, <span class="number">10</span>)+<span class="string">"个子数组积小于10"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>有3个数组和等于10</p><p>有4个子数组积小于10</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;leetcode-713&quot;&gt;&lt;a href=&quot;#leetcode-713&quot; class=&quot;headerlink&quot; title=&quot;leetcode 713&quot;&gt;&lt;/a&gt;leetcode 713&lt;/h2&gt;&lt;p&gt;　　在 &lt;a href=&quot;https://leetcode-
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="回溯" scheme="http://yoursite.com/tags/%E5%9B%9E%E6%BA%AF/"/>
    
      <category term="子数组和" scheme="http://yoursite.com/tags/%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/"/>
    
      <category term="子数组积" scheme="http://yoursite.com/tags/%E5%AD%90%E6%95%B0%E7%BB%84%E7%A7%AF/"/>
    
  </entry>
  
</feed>
